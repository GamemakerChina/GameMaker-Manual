<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>向量</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">向量</span></h1>
  <p>我们一般说的向量指的是英文单词Vector，这个词在数学中常被称为向量，在物理学中常被称为矢量。</p>
  <p>在制作任何复杂程度的游戏时，你都可能需要处理矢量。在物理学、人工智能、三角学和其他许多情况下都会用到矢量，但什么是矢量呢？简单来说，矢量就是一个有方向的量。让我们先来看一个一维矢量，它等同于一个单独的数字。用箭头画一条数字线，从 0 开始，到 5 结束，这就是向量 &quot;a&quot;，它等于 5；如果我们再画一个箭头，从 5 开始，到 8 结束，这就是向量 &quot;b&quot;，它等于 3：</p>
  <p><img alt="1D Vector Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_1D.png" />你应该意识到，一个向量从哪里开始并不重要，重要的是它有多长和朝哪个方向。因此，矢量 &quot;b &quot;从 5 开始，长 3 个单位，指向 &quot;右边&quot;，因此它与从 0 开始指向 3 的矢量完全相同。现在，你也可以将这两个矢量 &quot;a &quot;和 &quot;b &quot;相加，得到等于 8 的矢量 &quot;c&quot;。那么负数呢？如果在上图中，指向 &quot;右边 &quot;的向量对应的是正数，那么指向 &quot;左边 &quot;的向量对应的就是负数。这就解释了矢量的基本概念：只有长度和方向（本例中的 &quot;左 &quot;或 &quot;右&quot;）才算数，位置并不重要。</p>
  <p>那么，二维向量呢？我们可以认为它们不仅由 &quot;左 &quot;和 &quot;右 &quot;组成，还由 &quot;上 &quot;和 &quot;下 &quot;组成：</p>
  <p><img alt="Various 2D Vectors" class="center" height="310" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Various.png" width="406" />现在，这些向量还不是真正的向量，因为我们还需要用起点坐标和终点坐标将它们缩小。查看向量 &quot;a&quot;，我们可以看到它的起点坐标是 [2,2]，终点坐标是 [4,3]：</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>现在让我们对向量 b 做同样的处理：</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>注意到什么了吗？这两个向量是一样的！这又一次证明了矢量没有位置，只有方向和长度，我们可以围绕局部 [0,0] 轴绘制相对于彼此的矢量：</p>
  <p><img alt="2D Vectors aroun [0, 0]" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_2D.png" />这意味着二维向量由两个值定义，即相对于本地 [0,0] 轴的 &quot;x &quot;和 &quot;y &quot;位置。那么三维向量呢？那么，它们需要考虑 &quot;深度 &quot;这个额外的维度，并将计算为围绕本地轴线的位置 &quot;x&quot;、&quot;y &quot;和 &quot;z&quot;，类似于这样：</p>
  <p><img alt="3D Vectors" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_3D.png" />房间编辑器中的物理重力属性就是 <span data-keyref="GameMaker 名称">GameMaker</span> 中使用矢量的一个很好的例子。重力是以围绕 [0,0] 位置的矢量计算的。因此，如果将重力定义为 [x0，y10]，重力将以 10 的力向下。</p>
  <p>通常，矢量可以在很多情况下使用，但有时你需要限制其值（比如在处理角度时），这就是我们将其归一化的原因。这本质上是一种数学技巧，用于将长度为 n 的向量转换为长度为 1 的向量，这意味着向量分量被归一化为 0 和 1 之间：</p>
  <p><img alt="Unit Vector example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1D.png" />要计算归一化向量，我们必须首先获得原始向量分量，然后用它们求出向量的长度。然后将每个向量分量除以这个长度，就得到了归一化向量分量，这些分量组成了归一化向量，其中所有坐标的平方和都等于 1：</p>
  <p><img alt="Vector Normalisation" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1.png" />首先，我们求出矢量的坐标并得到其分量：</p>
  <p class="code">vx = (x2 - x1); // = (7 - 1) = 6<br />
    vy = (y2 - y1); // = (4 - 1) = 3</p>
  <p>然后，我们利用这些值来计算向量的长度：</p>
  <p class="code">len = sqrt(sqr(vx) + sqr(vy)); // = sqrt(36 + 9) = sqrt(45) = 6.708203932499369</p>
  <p>现在，我们得到了矢量 &quot;a &quot;的确切长度，因此，让我们用它来对两个矢量分量 vx 和 vy 进行归一化处理：</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>太好了！我们现在已经将向量的分量标准化了！但这在 <span data-keyref="GameMaker 名称">GameMaker</span> 中有什么实际用处呢？好吧，让我们举一个实际的例子...</p>
  <p>假设在一款游戏中，玩家需要向敌人射击，您需要知道要击中敌人，子弹物体每一步需要沿 x 轴和 y 轴移动多少距离：</p>
  <p><img alt="Vector Game Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_2.png" />为此，您需要使用玩家和敌人的坐标来获取矢量分量和长度，然后将它们归一化，得到一个介于 0 和 1 之间的值，最后再乘以您希望子弹每一步移动的速度。最后将这两个值存储起来，并添加到每一步的起始 x 坐标和 y 坐标上。听起来很复杂？其实并不复杂，请看（为简单起见，数值四舍五入到小数点后一位）：</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(sqr(vx) + sqr(vy)); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>因此，要击中目标，我们需要每一步在子弹的 x 坐标上加上 3，在 y 坐标上加上 4。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Guide_To_Using_Buffers.htm">Guide To Using Buffers</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>