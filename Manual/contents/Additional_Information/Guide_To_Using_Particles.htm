<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>粒子使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module">
    //<![CDATA[
    <
    meta name = "rh-authors"
    content = "Mark Alexander" / >
      <
      meta name = "topic-comment"
    content = "Page that explains how to set up and use particles" / >
      <
      meta name = "rh-index-keywords"
    content = "Guide To Using Particles" / >
      <
      meta name = "search-keywords"
    content = "particles,particle guide,particle setup" / >
    //]]>
  </script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">粒子使用指南</span></h1>
  <p>本指南是为那些想了解如何在 GML 中使用和创建粒子的人准备的。本页将涵盖粒子的 <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">GML 代码函数</a> 和 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm">GML 可视化操作</a>，如果您以前从未使用过粒子，我们希望本指南能让您入门，因为粒子非常有用，制作起来也相当有趣。</p>
  <div data-conref="../assets/snippets/Note_tip_use_particle_system_editor.hts"> </div>
  <p>在继续深入之前，我们也许应该解释一下粒子究竟是什么... 基本上，<a id="particle"></a>粒子是一种图形资源，它具有由粒子系统定义的特定属性。这些属性无法直接对单个粒子进行操作，但可以通过用于定义粒子系统的代码或动作进行集体更改。它们对于在游戏中创建精美华丽的效果或微妙细致的效果非常有用，而且不会像使用实例那样占用 CPU 资源。</p>
  <p>我们已经提到过粒子系统，所以在继续之前，我们先来解释一下什么是粒子系统。可以把<a id="particle_system"></a>粒子系统想象成一个容器，用来盛放准备使用的粒子。您可以使用代码或动作来定义粒子的视觉效果，然后将它们放置在 &quot;容器&quot;（粒子系统）中，这样您就可以随时随地将其取出并使用。</p>
  <p>在设置系统和创建粒子之前，我们有必要了解一些事情... 首先，粒子系统的大部分代码在游戏中只会被调用一次，通常是在第一个房间或关卡中的某种控制器对象中--情况并非总是如此，但为了简单起见，我们将在下面的简要指南中使用这种情况，因为这是最常见的粒子使用方式。这样做的原因是，粒子系统一旦创建，就会保留在内存中，随时可以使用，因此如果创建多次，就会迅速增加内存使用量，造成严重的延迟，甚至有可能导致游戏崩溃。在本指南中，为了简单起见，您将制作一个<a href="../GameMaker_Language/GML_Overview/Variables/Global_Variables.htm">全局</a>粒子系统，供游戏中的任何实例随时使用。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">创建粒子系统</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">首先，您需要定义粒子系统并为其命名，以便使用。由于这将是一个全局系统，任何对象都可以使用，因此您需要在控制器对象或游戏开始时运行的初始化函数中进行定义。GML 代码如下：</p>
    <p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false);</p>
    <p class="dropspot">或者使用 GML 可视化：</p>
    <p class="dropspot"><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png" /></p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> 所提供的图层名称必须是系统所在房间的有效图层，否则将无法看到粒子。另外请注意，我们将 <span class="inline2"><a data-xref="{title}" data-cke-saved-href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/persistent.htm" href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/persistent.htm">persistent</a></span>标志（在代码和 GML 可视化 中）设置为 <span class="inline2">false</span>。持久粒子系统是一种可以在不同房间内 &quot;持久存在&quot; 的系统，而无需在每个房间内销毁和重新创建。不过，为了保持本指南的简洁性，我们不会使用持久性。</p>
    <p class="dropspot">这就是创建的系统，但粒子呢？我们也必须给它们下定义，否则这个系统就是无用的，什么也做不了。</p>
    <p class="dropspot">如果您已经有了一个<span data-keyref="Type_Asset_ParticleSystem"><a target="_blank" href="../The_Asset_Editors/Particle_Systems.htm">粒子系统资产</a></span>，您可以使用上述函数/操作，将资产传入 <span class="inline2">partsys</span>/&quot;System&quot; 参数中来创建它。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">定义粒子类型</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">要在系统中使用粒子，首先必须定义粒子的一般属性。这些属性与对象属性类似，但只以一般方式应用于单个粒子。这意味着，如果您赋予粒子的最小移动速度为 1，最大移动速度为 2，那么系统创建的任何粒子每步的随机速度都将介于 1 和 2 像素之间，总体而言，它们的平均速度为 1.5。您应该在创建系统时使用的同一对象中使用以下 GML 为系统命名并添加第一个粒子：</p>
    <p class="code">global.Particle1 = part_type_create();</p>
    <p class="dropspot">对于使用 GML 可视化：</p>
    <p class="dropspot"><img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png" /></p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> 使用 GML 可视化，我们还可以勾选混合选项。这样就可以对粒子进行叠加混合，下面我们将进一步讨论。</p>
    <p class="dropspot">现在，您已经有了一个系统和一个可以放入其中的粒子，但您还没有准备好创建出色的效果！您还必须定义粒子的属性，即：它的外观--速度、角度、透明度等。有很多细节可以用来定义粒子效果，下面将概述最重要的设置，然后是使用所有这些设置的代码片段和 GML 可视化：</p>
    <ul class="dropspotlist">
      <li class="dropspot"><strong>shape</strong>: 粒子的形状就是它将使用的内置精灵，默认为常量 pt_shape_pixel。如果需要，还有一个添加自定义粒子的函数 - <span class="inline3_func"><a data-xref="{title}" data-cke-saved-href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm" href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm">part_type_sprite</a></span>- 或<a data-xref="{title}" data-cke-saved-href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm" href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">Set Particle Sprite</a>的操作。</li>
      <li class="dropspot"><strong>size</strong>: 设置粒子类型的尺寸参数。您可以指定最小起始尺寸、最大起始尺寸以及每一步的尺寸增量（使用负数表示尺寸减小）。这是一个标量值，将等量修改基础图像的 x/y 缩放比例。</li>
      <li class="dropspot"><strong>colour</strong>: 如果只使用一种颜色，则设置粒子的颜色。如果提供了两种或三种颜色，这将是混合色，在其生命周期内从一种颜色混合到另一种颜色。</li>
      <li class="dropspot"><strong>alpha</strong>: 在 0 和 1 之间设置粒子的透明度值。如果只输入一个值，这将是粒子的透明度值；如果输入两个或三个值，那么在粒子的生命周期内，透明度值将在这两个值之间混合。</li>
      <li class="dropspot"><strong>speed</strong>: 设置粒子类型的速度属性。您可以指定最小和最大速度，并在创建粒子时在给定范围之间随机选择一个值。您可以指定每一步的速度增长，甚至使用负数来减慢粒子的速度（速度永远不会小于 0）。</li>
      <li class="dropspot"><strong>direction</strong>: 设置粒子类型的方向属性。同样，您可以指定一个方向范围（以逆时针方向为单位--0 表示向右运动，90 表示向上运动，等等......）。例如，如果要让粒子随机移动，可以选择最小值 0 和最大值 360。您还可以指定每一步的增加方向（也可以是负值）。</li>
      <li class="dropspot"><strong>orientation</strong>: 设置粒子类型的方向角属性。您可以指定最小角度、最大角度以及每一步的增量。您还可以指定给定角度是相对于当前运动方向还是绝对角度，例如：将所有值都设为 0，但相对值设为 true，粒子的方向就会精确地跟随粒子的运动轨迹。</li>
      <li class="dropspot"><strong>blending</strong>: 设置粒子类型是使用叠加混合（additive blending）还是普通混合（normal blending）。使用 GML 代码时，这将在函数中设置；使用 GML 可视化时，这将作为粒子初始化的一部分。叠加混合意味着粒子将使用 bm_add 混合模式，使它们重叠的地方看起来 &quot;发光&quot;，并与下面绘制的任何东西（精灵、背景、图块等）混合--这对火和魔法效果（例如）非常有用，但对烟雾之类的效果最好不要使用。试验一下就会发现不同之处！请注意，在创建粒子时，启用此功能会破坏纹理批处理，因此每一步绘制粒子时需要更多的批处理--这一点需要考虑，因为它可能会影响性能，尤其是在移动设备上。</li>
      <li class="dropspot"><strong>life</strong>: 以步数（游戏帧数）为单位设置粒子类型的生命周期界限。与之前的设置一样，它有一个最小值和最大值，粒子将在这些值范围内随机持续若干步。因此，如果生命周期的最小值和最大值分别为 30 和 30，粒子的存在时间将正好为 30 步；如果生命周期的最小值和最大值分别为 20 和 60，粒子的存在时间将在 20 到 60 步之间随机变化。</li>
    </ul>
    <p class="dropspot">现在，在介绍定义粒子的代码之前，我们先来谈谈 &quot;wiggle&quot;... 信不信由你，&quot;wiggle&quot; 是粒子的一个属性，可以单独为上述许多设置进行设置。当你看到 &quot;wiggle&quot; 作为粒子函数或动作的参数时，这意味着如果你在 1 到 20 之间放置一个数字，粒子就会在该属性的最小值和最大值之间摆动或波动，1 表示摆动速度很慢，20 表示摆动速度很快。因此，如果粒子速度最小值为 2，最大值为 5，摆动值为 20，那么在每个粒子的生命周期内，它都会在最小/最大速度之间快速摆动。</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> 还有其他一些次要的粒子属性，我们在这里就不一一介绍了，只是希望在开始的时候尽量简单。有关粒子属性的详细信息，请参阅相应页面。</p>
    <p class="dropspot">现在让我们看看定义粒子的代码：</p>
    <p class="code">// This defines the particle&#39;s shape<br />
      part_type_shape(global.Particle1,pt_shape_pixel);<br />
      <br />
      // This is for the size<br />
      part_type_size(global.Particle1,1,1,0,2);<br />
      <br />
      // This sets its colour. There are three different codes for this<br />
      part_type_color1(global.Particle1,c_white);<br />
      <br />
      // This is its alpha. There are three different codes for this<br />
      part_type_alpha1(global.Particle1,1);<br />
      <br />
      // The particles speed<br />
      part_type_speed(global.Particle1,0.50,2,-0.10,0);<br />
      <br />
      // The direction<br />
      part_type_direction(global.Particle1,0,359,0,20);<br />
      <br />
      // This changes the rotation of the particle<br />
      part_type_orientation(global.Particle1,0,0,0,0,true);<br />
      <br />
      // This is the blend mode, either additive or normal<br />
      part_type_blend(global.Particle1,1);<br />
      <br />
      // This is its lifespan in steps<br />
      part_type_life(global.Particle1,5,30);
    </p>
    <p class="dropspot">要在 GML 可视化中创建相同的粒子定义，我们需要这些操作：</p>
    <p class="dropspot"><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png" />就是这样！我们现在已经定义了粒子，可以随时使用了。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">在游戏中直接创建粒子</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">有几种创建粒子的方法，各有利弊。你可以使用发射器来爆发或流动粒子，也可以直接在一个点上创建粒子。使用哪种方法取决于您想要实现的目标和想要创建的效果，但我们将从最简单的方法开始，即直接创建粒子。在 GML 中，我们将使用以下函数：</p>
    <p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10);</p>
    <p class="dropspot">而在 GML 可视化中则是</p>
    <p class="dropspot"><img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png" />上述单个代码/操作将在给定的 x/y 坐标处从我们的全局系统中创建 10 个类型为 &quot;Particle1&quot; 的粒子。非常简单！这行代码/动作的最大优点是，它可以在任何地方使用，而不会有任何麻烦。例如，如果将它放在对象中鼠标的全局左键按下事件中，并更改 mouse_x/y 位置的 x/y 值，那么每次按下按钮时，它都会在鼠标位置创建粒子。或者，如果你有一个火箭，那么你可以把它放在步进事件中，这样每一步都会有烟雾粒子产生（虽然 1 或 2 个可能比 10 个更好！）。您甚至可以通过随机改变 x/y 坐标等方式，让它在一个区域内产生粒子：</p>
    <p class="code">repeat(50)<br />
      {<br />
      var xx = x + 20 - random(40);<br />
      var yy = y + 20 - random(40);<br />
      part_particles_create(global.P_System, xx, yy, global.Particle1, 1);<br />
      }</p>
    <p class="dropspot"><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png" />上述代码将在 40px 平方区域内的随机位置创建 50 个粒子。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">使用发射器创建粒子</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">既然我们已经介绍了创建粒子的简单方法，现在让我们用稍微复杂一点的方法，也就是使用发射器。发射器是粒子系统的另一部分，在使用前必须先定义好，因此我们将制作一个全局发射器，就像制作系统和粒子一样。我们还必须决定是否使用静态（非移动）发射器，粒子是要爆裂还是流射，以及决定发射器使用的区域和分布方式。</p>
    <p class="dropspot">这意味着什么？静态发射器是一种只需定义一次就可以忘记的发射器，因为它在游戏过程中不会移动到任何地方，例如：想一想火炮--它不会移动，只会发射火焰，所以是静态的，但火球则需要动态发射器，它会在屏幕上移动。至于爆裂还是流，爆裂是粒子的一次性爆炸，而流则是粒子的常量流。至于面积和分布，使用发射器时，您可以定义发射粒子的面积（可以是矩形、椭圆、菱形或直线）以及分布曲线（高斯、反高斯或线性）。</p>
    <p class="dropspot">下面的图片说明了发射器的不同区域形状类型：</p>
    <p class="dropspot"> </p>
    <center><img alt="Rectangle Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Rectangular.gif" /> <img alt="Line Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Line.gif" /></center>
    <center><img alt="Ellipse Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Ellipse.gif" /> <img alt="Diamond Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Diamond.gif" /></center>
    <p class="dropspot">
      分布曲线（线性曲线、高斯曲线和反高斯曲线）见图示：<br /></p>
    <p><img alt="Particle distribution" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Distribution.png" /></p>
    <p class="dropspot">下面是定义两个发射器所需的代码/操作示例，通常会在控制器对象的创建事件中定义两个发射器，就在定义粒子系统之后。其中一个是静态的，粒子流遍布整个房间，另一个是动态的，跟随鼠标每 30 步从一个小椭圆中迸发：</p>
    <p> </p>
    <p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);<br />
      global.Particle1_Emitter2 = part_emitter_create(global.P_System);<br />
      <br />
      // Set up the area that will emit particles<br />
      part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);<br />
      part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);<br />
      <br />
      // Set the first to stream 10 particles every step<br />
      part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);<br />
      <br />
      // This can now be forgotten as it will function until told to stop...<br />
      // Set the alarm[0] event to burst the emitter2 particles...<br />
      alarm[0] = 30;
    </p>
    <p class="dropspot"><img alt="Define Particle Emitters" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Emitter.png" />因此，我们在这里创建了两个粒子发射器，并将其分配给我们一开始创建的粒子系统。创建这些发射器的函数/动作允许我们定义房间内发射粒子的区域，并给出要发射的粒子类型以及在定义区域内使用的形状和分布。这些函数/动作将返回一个数值，即发射器 ID 值，我们将其存储在一个变量中，以便使用其他发射器函数来瞄准这些发射器。</p>
    <p class="dropspot">现在，我们有了流式粒子的代码/GML可视化（这些粒子将在每个游戏步骤中发射，无需我们做其他任何事情），但我们还想添加一个 alarm[0] 事件，以便在特定时间间隔内爆发粒子：</p>
    <p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);<br />
      part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);<br />
      alarm[0] = 30;</p>
    <p class="dropspot"><img alt="Burst Particles From Emitter" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Set_Emitter.png" />粒子爆发只是粒子发射器一次性爆炸产生的粒子，而不是每帧都源源不断地产生粒子。</p>
    <p class="dropspot">但如果您想让多个对象都发射粒子，该怎么办呢？全局发射器一次只能出现在一个地方，因此您需要在每个物体中创建局部发射器。这些发射器仍将使用全局粒子系统和其中的任何粒子，但它们可以有不同的形状和大小，并随物体移动，因此非常适合制作火箭或子弹之类的东西。使用的代码与上述代码完全相同，只是在发射器名称前没有 &quot;global&quot; 前缀。</p>
    <p class="dropspot">粒子的产生已经处理完毕，但还有一件事非常重要...... 完成后的清理工作。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">清理</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">正如一开始提到的，粒子系统（及其粒子、发射器等）一旦创建，就会存储在内存中，以供即时使用。很好，但如果重新启动游戏会发生什么呢？或者玩家死亡后重新启动房间会发生什么情况？如果管理不当，就会出现内存泄漏。这是指某些东西已经创建并占用了内存，但却被 &quot;去引用&quot; 了，也就是说 GameMaker 不再能访问它。这种情况会慢慢消耗内存，导致游戏延迟，甚至阻塞计算机，造成游戏崩溃，这在初次使用粒子系统的用户中是一个相当常见的问题。</p>
    <p class="dropspot">如何避免这种情况？好吧，GameMaker 有 GML 代码函数和 GML 可视化动作，可以在不使用时从内存中删除粒子系统及其发射器和粒子，只要在使用以下代码/动作时稍加计划，就可以轻松避免这个潜在的问题。</p>
    <p class="dropspot">首先要做的是决定在哪里创建系统以及如何使用它。您可以在第一个房间（如菜单或标题屏幕）中某个对象的游戏开始事件中创建一个全局系统，但这意味着如果您使用<span class="inline3_func"><a data-xref="{title}" href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm">game_restart</a></span>函数重启游戏，该系统将被重新创建并导致内存泄漏。或者你也可以在任何房间的实例中创建一个本地系统，但同样，如果你离开房间，那么系统将无法访问并导致内存泄漏。为了避免这种情况，你需要在<a href="../The_Asset_Editors/Object_Properties/Other_Events.htm">游戏结束事件</a>或对象的<a href="../The_Asset_Editors/Object_Properties/Object_Events.htm">清理事件</a>中加入类似的内容：</p>
    <p class="code">part_type_destroy(global.Particle1);<br />
      part_emitter_destroy(global.P_System, global.Particle1_Emitter);<br />
      part_emitter_destroy(global.P_System, global.Particle2_Emitter);<br />
      part_system_destroy(global.P_System);</p>
    <p class="dropspot"><img alt="Clean Up Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CleanUp.png" />这将从内存中删除已定义的粒子、发射器和系统，以便您重新启动游戏或更换房间。请记住，在考虑了哪里最适合创建系统后，也要考虑一下哪里最适合销毁系统！</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>现在您已经了解了有关粒子、粒子系统和发射器的基本知识，可以将它们添加到游戏中了！不过，在匆忙为所有东西添加粒子效果之前，请注意，虽然粒子对 CPU 的消耗比实例少，但它们并不能解决所有问题，因为如果同时使用成千上万个粒子，就会造成延迟。最好的办法是进行试验，谨慎使用它们来 &quot;充实&quot; 游戏的视觉效果，在不过度使用的情况下为游戏增添更多亮点。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Additional_Information.htm">附加信息</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Guide_To_Using_Shaders.htm">着色器使用指南</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>