<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>混合模式使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how blendmodes work." />
  <meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes" />
  <meta name="search-keywords" content="blendmodes,blending,blend modes" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><a href="Guide_To_Using_Blendmodes.htm">混合模式使用指南</a></h1>
  <p>如果您使用<span data-keyref="GameMaker 名称">GameMaker</span>已经有一段时间，那么您几乎肯定已经接触过混合模式，并且可能甚至在游戏中使用过它们。混合模式是改变绘制方式以产生有趣和特定图形效果的好方法，但您知道它们是如何工作以及如何使用吗？这是一个可能会让人感到困惑的主题，因此在本节中，我们希望消除一些围绕<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">混合模式</a>的神秘感，并让您充分利用它们在游戏中的应用。</p>
  <h2>概述</h2>
  <p>混合模式基本上告诉您的游戏要绘制某些东西，与之前已经绘制过的内容混合在一起。您绘制到屏幕上的所有内容都由四个组件部分组成 - 红色、绿色、蓝色和透明度 - 默认情况下，它们使用混合模式 <span class="inline">bm_normal </span>绘制到屏幕上。这种混合模式绘制所有像素时，它们的颜色和透明度值基本保持不变（尽管在本节后面您会看到这并不完全正确...），但 <span data-keyref="GameMaker 名称">GameMaker</span> 有许多内置的混合模式可以设置以改变这种行为。</p>
  <p>当 <span data-keyref="GameMaker 名称">GameMaker</span> 绘制一个像素时，有一个源颜色（您要绘制的像素的颜色）和一个目标颜色（已经在我们要绘制的像素中的颜色）。在确定像素的新颜色时，GameMaker将根据上述提到的混合模式来组合源颜色和目标颜色。每个颜色的组成部分都存储为介于0和1之间的浮点值，并且新颜色是通过将源颜色的每个组成部分乘以某个因子，将目标颜色的每个组成部分乘以另一个因子，然后逐个组成部分地将结果相加而计算出来的。</p>
  <h2>基本混合模式</h2>
  <p><span><span data-keyref="GameMaker 名称">GameMaker</span> 使用函数 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a> 来改变游戏绘制时使用的混合模式。您可以在（例如）绘制精灵之前调用这个函数，然后再将它设置回去，就像这样：</span></p>
  <p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p><span>以上代码使用加法混合模式来绘制精灵实例。加法混合模式是使用可用的GML常量之一设置的，其中有四种基本模式：</span></p>
  <p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p>
  <p><span>我们已经见过 <span class="inline">bm_normal</span> 是什么样子了 - 因为这是所有默认的！- 所以让我们继续详细了解其他三种模式...</span></p>
  <p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><span>这种混合模式将源像素和目标像素的颜色值相加（但不影响 alpha 值）。例如，如果您的背景图像是一个RGB值为(100,15,70)的纯色，然后您绘制一个RGB为(120,25,30)的矩形，那么（使用bm_add）矩形的每个像素的最终RGB值将是(220,40,100)。请注意，颜色值不能超过255（或低于0），因此任何相加得到的值超过255都将被限制为255。</span></p>
    <p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /><span>使用这种混合模式是获得“霓虹光”外观的好方法，通常用于光照效果、激光或几乎任何您希望呈现发光或有发光效果的场景。</span></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot"><span>这种混合模式与前一种有些不同，因为它是基于一个百分比而不是直接数值来工作的。这个百分比将从目标颜色（即要绘制的像素的颜色）中减去。为了更好地解释这一点，让我们来看一个例子。</span></p>
    <p class="dropspot"><img alt="bm_subtract example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmSubtract.png" /><span>假设您想要将房间中某个区域内所有像素的红色值减少25％。您首先需要获得255的25％，然后将其转换为RGB颜色值，最后使用bm_subtract来覆盖该区域。类似这样：</span></p>
    <p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p>
    <p class="dropspot"><span>按照同样的规则，如果您只是希望将背景的亮度减少50％，那么您会得到一个颜色，其中红色、绿色和蓝色均为50％，即：RGB (128, 128, 128)。这种混合模式主要用于绘制阴影或创建有趣的渐变效果。</span></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span>这种混合模式更复杂一些，但基本上是将源颜色乘以源阿尔法，然后将它们加到目标颜色值上，乘以反转的源颜色值。实际上，bm_max（以及其他混合模式）背后的数学原理将在我们文章的第二部分中介绍，但您需要知道的是，结果将是一种更“饱和”和更明亮的颜色，而不会导致与使用bm_add相同的纯白光辉。</span></p>
    <p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmMax.png" /><span>当您需要绘制重叠的图像而不让它们变得过亮以至于看不见时，这种混合模式就很有用。亮部分会变得更亮，但它们应该仍然保持一定程度的色彩和色调。请注意，当使用这种混合模式时，源图像的<span>阿尔法</span>值也会影响最终效果。</span></p>
  </div>
  <p> </p>
  <p>现在您已经了解了在<span data-keyref="GameMaker 名称">GameMaker</span>中使用混合模式的基础知识。它接受源图像（即正在绘制的内容）的RGB和透明度值，然后将其与目标图像（也就是正在绘制的内容）的RGB和透明度值混合在一起。根据我们希望实现的效果，通过以不同的程度乘以每个像素颜色和透明度的各个组成部分来进行混合。有了这些知识，您可以开始在游戏中使用混合模式来制作发光的激光、逼真的阴影或饱和的过渡效果，但这里还有更多要学习的！接下来，我们将探讨扩展的混合模式，并探索一些背后的数学原理，这样您就可以创建自己的混合效果，比如叠加或叠相混合。</p>
  <h2><strong>扩展混合模式</strong></h2>
  <p><span>之前我们已经讨论了函数 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>，但现在我们将看一下 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>。这个函数（如其名称所示）是一个用于设置自定义混合模式的扩展函数，但它是如何工作的呢？在我们进一步探讨之前，先来看看干巴巴的技术解释：</span></p>
  <ul class="colour">
    <li><span>函数gpu_set_blendmode_ext(src, dest)指示要为源颜色和目标颜色使用什么混合模式。新颜色是源颜色乘以某个因子，加上目标颜色乘以另一个因子。这些因子是由该函数设置的。为了理解这一点，源和目标都有红色、绿色、蓝色和透明度分量。因此，源为(Rs, Gs, Bs, As)，目标为(Rd, Gd, Bd, Ad)。所有值都被认为处于0和1之间。 </span></li>
  </ul>
  <p><span>尽管上面的文字是正确的，解释了混合模式的作用，但并不是很直观... 所以让我们稍微详细地解释一下这到底是怎么回事。</span></p>
  <p><span>当我们谈论源时，我们是在谈论正在绘制的像素的颜色和透明度值，当谈论目标时，我们是在谈论正在覆盖的像素的颜色和透明度值。为了简化问题，我们可以将源颜色的各个分量写出来，就像这样：</span></p>
  <ul class="colour">
    <li><span class="inline">(Rs, Gs, Bs, As)</span> = <span>你将要绘制的颜色的RGB和透明度值。</span></li>
  </ul>
  <p><span>而目标则会是这样：</span></p>
  <ul class="colour">
    <li><span class="inline">(Rd, Gd, Bd, Ad)</span> = <span>你将要绘制在上面的颜色的RGB和透明度值。</span></li>
  </ul>
  <p><span>所以，当我们在屏幕上绘制东西时，我们的图形处理器实际上对每个像素做了以下操作：</span></p>
  <p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p>
  <p><span>上述提到的<strong><span>混合因子</span></strong>在 <span data-keyref="GameMaker 名称">GameMaker</span> 中由多个GML常量定义，并且每个常量代表着源或目标的R、G、B和A值应该乘以的因子。可用的因子包括：</span></p>
  <ul class="colour">
    <li><span class="inline">bm_zero</span>: <span>混合因子为</span> (0, 0, 0, 0)</li>
    <li><span class="inline">bm_one</span>: <span>混合因子为</span> (1, 1, 1, 1)</li>
    <li><span class="inline">bm_src_colour</span>: <span>混合因子为</span> (Rs, Gs, Bs, As)</li>
    <li><span class="inline">bm_inv_src_colour</span>: <span>混合因子为</span> (1-Rs, 1-Gs, 1-Bs, 1-As)</li>
    <li><span class="inline">bm_src_alpha</span>: <span>混合因子为</span> (As, As, As, As)</li>
    <li><span class="inline">bm_inv_src_<span class="inline">alpha</span></span>: <span>混合因子为</span> (1-As, 1-As, 1-As, 1-As)</li>
    <li><span class="inline">bm_dest_<span class="inline">alpha</span></span>: <span>混合因子为</span> (Ad, Ad, Ad, Ad)</li>
    <li><span class="inline">bm_inv_dest_<span class="inline">alpha</span></span>: <span>混合因子为</span> (1-Ad, 1-Ad, 1-Ad, 1-Ad)</li>
    <li><span class="inline">bm_dest_colour</span>: <span>混合因子为</span> (Rd, Gd, Bd, Ad)</li>
    <li><span class="inline">bm_inv_dest_colour</span>: <span>混合因子为</span> (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li>
    <li><span class="inline">bm_src_<span class="inline">alpha</span>_sat</span>: <span>混合因子为</span> (f, f, f, 1); f = min(As, 1-Ad)</li>
  </ul>
  <p><span><span data-keyref="GameMaker 名称">GameMaker</span>具有的四种“基本”混合模式实际上是这些混合因子中的两种的组合。</span></p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">bm_normal 运作的示例</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><span>现在我们来看一下在<span data-keyref="GameMaker 名称">GameMaker</span>中如何实际使用这些混合因子进行绘制的实际示例。我们将以&quot;bm_normal&quot;为例，它实际上是：</span></p>
    <p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p>
    <p class="dropspot"><span>人们在混合模式中遇到的一个问题是难以想象结果，所以为了展示它们背后的数学原理，我们将使用这个混合模式作为我们的测试对象，因为这是每个人使用最多的混合模式，我们对它的预期效果非常清楚。假设我们要用颜色(128, 255, 64, 255)的矩形覆盖颜色为(64, 128, 255, 255)的背景：</span></p>
    <p class="dropspot"><img alt="Example of bm_normal" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example1.png" /><span>因此，我们的混合模式如下：</span></p>
    <p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p>
    <p class="dropspot"><span>如您所见，我们将目标值乘以 0，这也使它们的值变成了 0，这意味着源颜色没有改变，因此我们最终的颜色值是 (128, 255, 64, 255)。您还可以看到阿尔法值的包含也会影响这个值：</span></p>
    <p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p>
    <p class="dropspot"><span>这给出了最终像素颜色 (96, 192, 159, 192)，并且会得到如下所示的图像：</span></p>
    <p class="dropspot"><img alt="Example Of bm_normal With Alpha" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example2.png" /></p>
    <p class="dropspot">希望您现在能清楚地看到混合模式因子的作用，以及如何将它们组合起来改变绘制内容以创建一些有趣的效果。我们现在将看一个实际示例，演示如何组合这些因子来创建您自己的自定义混合模式。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><span>现在您知道了如何设置混合模式以及看到了它在日常绘图中的示例，让我们来看一些更复杂的东西...</span></p>
  <p> </p>
  <h2><span>创建您自己的混合模式</span></h2>
  <p><span>使用不同的因子，您可以创建自己的混合模式，以实现通常情况下无法实现的混合选项。在这个例子中，我们将创建一个类似于Photoshop中使用的“multiply”效果的混合模式。我们可以使用我们上面提到的两个混合模式因子常量来模拟这种混合模式，就像这样：</span></p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p>
  <p><span>在我们实际使用这种混合模式绘制东西之前，让我们先看看它在Photoshop中应该是什么样子：</span></p>
  <p><img alt="The &quot;Multiply&quot; Blend Mode In Photoshop" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Multiply.png" /><span>使用我们的扩展混合模式，我们得到以下结果：</span></p>
  <p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p>
  <p><span>混合因子 </span><code>bm_zero</code><span> 有效地从方程中移除了目标颜色（因为零乘以任何数都是零），因此我们留下的是源颜色乘以目标颜色的混合因子，因此称之为“multiply”模式。要在<span data-keyref="GameMaker 名称">GameMaker</span>中使用这个功能，您只需要在Draw事件中像这样简单地写入代码：</span></p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>下一张图片是从一个在GameMaker中使用了这段精确代码的测试项目中取出的：</p>
  <p><img alt="The &quot;Multiply&quot; Blend Mode In GameMaker" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_MultiplyGMS.png" />你能看出区别吗？可能看不出来！不过，由于所使用的渲染工具不同，两者之间会有一些偏差，但几乎与你所期望的完全一样。但要注意的是，并不是所有美术程序使用的混合模式都能在 <span data-keyref="GameMaker 名称">GameMaker</span> 中使用，因为有些混合模式会强制颜色值超过 255，从而产生特殊效果，但这并不意味着你不能用它们来模仿这些效果，甚至产生全新的效果。</p>
  <p>值得一提的是，在 <span data-keyref="GameMaker 名称">GameMaker</span> 中，您可以使用<span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span>函数来进一步实现这一点。这样，您就可以将不同混合模式因子中的透明分量分离出来，并单独使用它们来创建更多可能的组合。我们不会在这里介绍这项功能，因为手册中已经对其进行了深入解释，但还是值得一提，以便您知道可以使用它。</p>
  <h2>表面和透明度</h2>
  <p>关于混合模式，还有一点值得注意，那就是它们如何影响颜色的 透明度 分量。如果只是简单地绘制到<a class="glossterm" data-glossterm="应用表面" href="#">应用表面</a>或<a class="glossterm" data-glossterm="显示缓冲区" href="#">显示缓冲区</a>，您并不需要考虑目标 透明度 值，因为它始终是一个值。然而，您自己制作的表面就不同了，因为您可以清除一个表面，使其具有从 0 到 1 的任意透明度值。这会产生一些与大多数人预期相反的有趣效果。</p>
  <p>为了说明这一点，我们将使用基本的默认 <span class="inline">bm_normal </span>来进行绘制。大多数人都认为，如果将表面清除为透明度0，然后绘制透明度值为 0.5 的图形，那么结果的透明度值也会是 0.5......但事实并非如此，很多人都认为这是 <span data-keyref="GameMaker 名称">GameMaker</span> 渲染过程中的一个 &quot;错误&quot;。但是，正如您将看到的，这根本不是一个错误！</p>
  <p>假设您有一个每个像素的透明度值都为 0 的表面，然后使用 bm_normal 混合模式在表面上绘制一个透明度值为 0.5 的圆。整个表面的透明度值仍为 0，但圆圈中的透明度值实际上为 0.25，因为：</p>
  <p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p>
  <p>如果您在现有的圆中再画一个圆，透明度 值也是 0.5，那么圆外的透明度值将为 0，圆间的透明度值将为 0.25，小圆内的透明度值将为 0.375：</p>
  <p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p>
  <p>如果您继续在一个 0透明度的表面上绘制若干 0.5透明度的圆，然后将这个表面绘制到房间里，您就可以清楚地看到这一点：</p>
  <p><img alt="Surface Alpha Illustration" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Surface.png" />如果您仍然对透明度感到困惑，请将它想象成另一种颜色。它的行为就像一种颜色，对它的所有计算都是以类似的方式进行的。虽然它对其他颜色的影响是可见的，但它并不是真的可见。这就是使用表面和混合模式（甚至是 bm_normal）时需要注意的最后一点...</p>
  <p>即使表面的透明度值为 0，颜色成分仍然存在，并会影响所有混合操作。因此，在使用红色清除过的零透明度清除表面上绘制（例如），源颜色和目标颜色会混合在一起，产生与您想象中不同的效果。上图是在黑色背景上清除为黑色的表面上绘制的，但如果我们将表面清除为红色，就会得到这样的效果：</p>
  <p><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_SurfaceRed.png" />希望您现在可以使用我上面列出的公式，并应用 bm_normal 的相应数字，自己找出出现这种情况的原因。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Project_Format.htm">项目格式</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>