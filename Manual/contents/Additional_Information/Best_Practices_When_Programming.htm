<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>编程时的最佳实践</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>编程时的最佳实践</h1>
  <p>在本页中，我们将介绍游戏编程时的一些 &quot;最佳实践&quot;，同时还将解释 <span data-keyref="GameMaker 名称">GameMaker</span> 的一些内部工作原理。不过，在继续之前，有两点非常重要：</p>
  <ul class="colour">
    <li>这只是一份指南，并不是编写游戏的万能定义--100% 完美的方法！这里提到的一般都是组织和微观优化方面的内容，当您对 GML 感到熟悉并认为合适时，就应将其纳入您的编程习惯中。</li>
    <li>如果您的游戏运行良好，而且您对目前的情况也很满意，那么就不要急于为了多挤出几分 FPS 而改变一切。您必须在可读、灵活和模块化代码与更改所需的时间和精力以及最终的总体收益之间取得平衡。基本上，如果它没坏，就不要去修它，把你在这里学到的东西保留到下一个项目中。</li>
  </ul>
  <p>说了这么多，让我们继续来看看编写优秀 GML 代码的一些一般技巧，您可以随时应用这些技巧...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">编程风格</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">说到写代码，每个人都有自己的风格。你编程的风格就是你放置括号的方式、缩进行的方式、声明和命名变量的方式等，这对于让其他人（以及未来的自己，当你在做完其他事情后不得不回到这个项目时）清楚地阅读你的代码至关重要。</p>
    <p class="dropspot"><a href="http://en.wikipedia.org/wiki/Programming_style">编程风格</a> 有很多很多，有些人认为他们的风格是最好的，但事实上，只要你在使用时保持一致，并且清晰明确地说明每件事的含义和作用，几乎任何风格都可以使用。</p>
    <p class="dropspot"><img alt="Code Style Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Style_Example.png" />上图是脚本中的函数声明示例，用于说明上述要点。你可以看到，它使用了 JSDoc 风格的注释来清楚地解释它的全部功能，而且编码风格也是一致的，缩进了 4 个空格，下划线用于本地变量、日志输出等...</p>
    <p class="dropspot">还要注意的是，虽然脚本编辑器允许你在每个打开/关闭括号处折叠代码，但你也可以使用 #region 和 #endregion 标记来分隔部分代码，从而大大提高可读性，尤其是在处理包含多个函数的大型脚本时。也可以对区域进行注释 --请参阅本页手册中的 &quot;编辑 &quot;部分）：</p>
    <p class="dropspot"><img alt="Example Of Using Regions" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Regions.png" />在编写代码时，您应该注意在编译最终游戏时，GameMaker 会删除注释、删除不必要的换行符和空白、替换常量/宏/枚举值，并在编译过程中对代码进行压缩。这意味着您可以根据需要在代码周围添加尽可能多的空白空间，而且您不必担心注释过短或只使用少量注释。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">使用本地变量</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">接着上面关于编程风格的观点，很多初学者都会做的一件事就是在一行代码中塞进尽可能多的内容。例如：</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">虽然并非完全不可读，但它的效率很低（例如，point_direction() 函数被调用了两次），而且显得杂乱无章，看起来很别扭。最好的表达方式是：</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">创建这些局部变量所需的内存和资源几乎可以忽略不计，这远远比不上你（或稍后阅读代码的其他人）从代码的清晰度中获得的即时收益。同样的想法也应适用于函数，你应该为输入变量指定合理的名称，并在需要时使用清晰的格式和局部变量，以尽可能提高代码的可读性。</p>
    <p class="dropspot">局部变量在游戏中的处理速度很快，因此要充分利用它们。如果一个表达式在代码块或脚本中出现两次或更多次，请考虑为它创建一个局部变量。在使用 <a class="glossterm" data-glossterm="YoYo 编译器 (YYC)" data-cke-saved-href="#" href="#">YoYo 编译器 (YYC)</a> 目标时，如果您在函数或代码块中多次引用全局变量或实例变量，那么在代码开始时将它们赋值给一个局部变量，然后再引用该局部变量，这样做会带来更好的性能。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">数组</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a data-cke-saved-href="../GameMaker_Language/GML_Overview/Arrays.htm" href="../GameMaker_Language/GML_Overview/Arrays.htm">数组</a>的使用速度很快，所需的内存也比数据结构少，但还可以进一步优化。创建数组时，内存会根据数组的大小分配给它，因此，即使以后才打算填充数组，也应尽量先将数组初始化为最大大小。例如，如果你知道需要一个数组最多容纳 100 个值，那么你就会使用 <span class="inline"><a data-cke-saved-href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm" href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm">array_create()</a> </span>函数直接将其初始化为 100 个插槽：</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">这样就可以在一个 &quot;大块 &quot;中分配内存，并将所有数组值设置为默认值 0，从而有助于保持快速运行，否则每次向数组中添加新值时，都必须重新分配整个内存。</p>
    <p class="note">
      <font color="#ffffff"><span style="font-size: 15px; background-color: rgb(41, 102, 182);"><b> 注意 </b></span></font> 在 HTML5 目标机上，像这样为数组赋值并不适用，您的数组应从 0 开始初始化！例如，您可以通过检查 os_browser 变量来轻松解决这个问题：
    </p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">您还可以通过将使用的变量设置为 0 来释放与数组相关的内存。 因此，要清除上面代码示例中的数组，您只需使用。<br /></p>
    <p class="code">array = 0;</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">数据结构</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">在 <span data-keyref="GameMaker 名称">GameMaker</span> 中，<a data-cke-saved-href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm" href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a>经过优化，速度比以前的 GameMaker 版本快很多。它们在不使用时仍需要清理（销毁）以释放内存，而且速度仍可能比数组慢，但其易用性和处理数据的额外函数往往超过了最小的速度差异，因此不要害怕在游戏中使用它们。</p>
    <p class="dropspot">值得注意的是，在所有数据结构中，DS Map 的读取和写入速度都非常快，是所有类型任务的最佳选择。</p>
    <p class="dropspot">前面我们提到了数组的<a data-cke-saved-href="../GameMaker_Language/GML_Overview/Accessors.htm" href="../GameMaker_Language/GML_Overview/Accessors.htm">访问器</a>，其实数据结构也可以使用访问器，它可以帮助你清理代码，使代码更易于阅读。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">碰撞</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><span data-keyref="GameMaker 名称">GameMaker</span> 中有<a data-cke-saved-href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm" href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">多种处理碰撞的方法</a>，其中大部分都会带来一些额外的 CPU 开销。<span class="inline">collision_</span> 和 <span class="inline">point_</span> 函数、<span class="inline">place_</span> 函数以及 <span class="inline">instance_</span> 函数都依赖于对房间内给定类型的所有实例进行<a class="glossterm" data-glossterm="边界框" data-cke-saved-href="#" href="#">边界框</a>检查，虽然引擎内置了一些优化功能来限制这些检查，但碰撞始终不是最有效的处理方式。如果开始使用精确碰撞，性能也会明显下降，因为不仅要进行边框检查，还要进行每像素检查，速度确实非常慢。</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">这并不是说您不应该使用这些函数，因为它们可能非常方便。不过，你应该知道在什么时候使用哪些函数，因为它们的工作方式略有不同，速度也不尽相同。粗略的经验法则是 <span class="inline"></span><span class="inline">place_</span> 函数比 <span class="inline">instance_</span> 函数快，<span class="inline">instance_</span> 函数比 <span class="inline">collision_</span> 和 <span class="inline">point_</span> 函数快，因此请阅读手册中关于每种函数的页面，确保在各种情况下选择最合适的函数。<br /></p>
    <p class="dropspot">或者，也可以考虑创建一个<strong>基于图块的碰撞系统</strong>，可以使用<a data-cke-saved-href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm" href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">图块地图函数</a>，甚至是自定义二维数组或 DS 网格来创建。这些系统将非常快速，有助于提高游戏速度。不过，如果您使用的是不规则的地形或墙壁以及不与网格对齐的物体，那么这些系统可能并不合适。您可以从以下视频链接中找到有关平铺贴图碰撞的简单教程</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">GameMaker 中的图块碰撞</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">纹理交换和顶点批处理</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">如果打开<a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm">调试覆盖层</a>，就会看到测试时屏幕上方有两个括号内的数字。第一个数字是纹理交换的次数，第二个数字是顶点批次的次数。影响这些数字的因素有很多，你永远无法将它们降到 (0) (0)，因为引擎每一步都需要一到两个，但你应该争取将这些数值降到尽可能低。</p>
    <p class="dropspot"><img alt="The Debug Overlay Bar" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractices_DebugOverlay.png" />对于纹理交换，最好和最有效的方法是优化精灵和背景在纹理页上的存储方式。这可以从<a href="../The_Asset_Editors/Sprites.htm">精灵首选项</a>中完成，也可以在<a href="../Settings/Texture_Groups.htm">纹理组编辑器</a>中创建纹理页。如果有许多图像只在主菜单中使用（例如），那么可以将它们放在一个单独的<a href="../Settings/Texture_Information/Texture_Pages.htm">纹理页</a>中。如果您有特定关卡的图片，或者玩家和敌人的图片等，也可以这样做。基本上，你要按用途将它们分组，这样就能尽可能减少交换。此外，为了帮助优化 <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a>，你还可以使用不同的<a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">预取和刷新</a>函数，根据需要从内存中加载和删除纹理。</p>
    <p class="note"><span class="note">注意</span> 正如本页开头提到的，如果你的游戏运行良好，FPS 也不错，那么就不用太担心纹理交换......尤其是在桌面目标上创建项目时。这些优化最好用于大型游戏或低端移动设备，如果使用不当，实际上会对性能产生负面影响。</p>
    <p class="dropspot">顶点信息会以 &quot;批次 &quot;的形式发送到 GPU 进行绘制，一般来说，批次越大越好。因此在绘制时应避免 &quot;破坏 &quot;批次，因为这会增加发送到 GPU 的顶点批次数量。有很多情况会破坏批次，主要包括混合模式、更改着色器、在绘制之前为着色器更改统一以及使用内置形状和基元绘制。</p>
    <p class="dropspot">因此，如果您有许多使用 bm_add 混合模式绘制的子弹实例（例如），您将为每个实例创建一个新的顶点批次，这绝对不是一件好事！相反，您可以在游戏中使用一个控制器对象来绘制所有子弹，就像这样：</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">注意</span> 这不仅适用于使用 bm_add，任何混合变化都会破坏批处理并影响性能。</p>
    <p class="dropspot">这样，所有子弹将在同一批次中绘制。明智地使用函数<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>、<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a> 和 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a>，可以大大提高性能，并可根据需要在整个项目代码中启用/禁用，不过它们可能并不适合所有类型的图形或项目。</p>
    <p class="note"><span class="note">注意</span> 如果在使用控制器时不需要实例自己绘制，那么只需在绘制事件中添加注释来抑制默认绘制，或者将实例设为不可见（不过这样会阻止所有代码在所有绘制事件中为实例运行）。</p>
    <p class="dropspot">减少这些数字的另一个方法是，除非绝对必要，否则禁用精灵的 &quot;独立纹理页 &quot;选项。以这种方式存储的每张图像都会被发送到自己的纹理页，并以不同的方式进行批处理，因此将这些图像放在常规纹理页上会更好。然后，您可以使用 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> 函数获取 UVS 坐标，并将其存储在变量中，以便以后使用。这可能会带来少量额外代码，但所带来的提升是值得的。请注意，这种方法不允许纹理重复！</p>
    <p class="dropspot">与所有这些提示一样，如果更改这些提示会使您的生活更加困难，而您的游戏运行正常，则不必过于担心...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">粒子</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a data-cke-saved-href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm" href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">粒子</a>为在游戏中创建动态效果提供了一种非常快速有效的方法，而且一般来说性能良好。但值得注意的是，在粒子上使用叠加混合、阿尔法混合和颜色混合可能会降低性能，尤其是在移动目标上，所以如果不需要，就不要使用！添加混合尤其会大大增加顶点批次，因此应谨慎使用。</p>
    <p class="dropspot">请注意，在非 WebGL HTML5 目标机上，使用多色渐变粒子需要大量的图像缓存，速度会非常慢。不过，由于粒子精灵可以是动画的，因此您可以创建一个具有可变色子图像的动画精灵，然后将其用于粒子。这样看起来颜色仍然会逐渐变化，但不需要一直创建缓存图像。<br /></p>
    <p class="dropspot">您可以在 &quot;<a data-cke-saved-href="Guide_To_Using_Particles.htm" href="Guide_To_Using_Particles.htm">粒子使用指南</a>&quot; 页面了解有关粒子的更多信息。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">表面</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">最后，我们将简要谈谈<a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">表面</a>的使用，因为 <span data-keyref="GameMaker 名称">GameMaker</span> 在游戏中使用表面时有一项相当重要的优化功能：打开或关闭深度缓冲区。</p>
    <p class="dropspot">在正常使用表面时，<span data-keyref="GameMaker 名称">GameMaker</span> 实际上会创建一个表面和一个深度缓冲区，以确保在 3D 中绘制任何图形时都能进行正确的深度排序。不过，对于大多数 2D 游戏来说，并不需要这个额外的深度缓冲区，因此会占用额外的内存空间和处理时间，而这些空间和时间本可以用来做其他事情。这就是 <a data-cke-saved-href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm" href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> 函数发挥作用的地方...</p>
    <p class="dropspot">可以在创建表面之前调用此函数来禁用深度缓冲区的生成，之后创建的所有表面都不会为其创建深度缓冲区。您可以根据需要启用/禁用此函数，甚至可以在游戏开始时调用一次，以禁用所有后续表面调用的深度缓冲区（在大多数 2D 游戏中都可以这样做）。虽然它不会大幅提升性能，但如果你的游戏严重依赖表面，那么一定要牢记这一点，这样可以防止游戏在低配置设备上耗尽内存。</p>
  </div>
  <p> </p>
  <p>除上述主要内容外，还有一些更普遍的内容也有助于提高性能，并被视为 &quot;良好做法&quot;：</p>
  <ul class="colour">
    <li>不要害怕使用三角函数，因为（与人们普遍认为的相反）它们非常快，尤其是与粒子、碰撞、字符串等相比......</li>
    <li>不要在绘制事件中加入非绘制内容的代码</li>
    <li>使用计时器调用任何不必每一步都调用的代码（而不是将其添加到步事件中）。</li>
  </ul>
  <p>但是，正如我们在本页开头提到的，所有这些优化都是可选的，如果你的游戏在 60 个顶点批次、80 个纹理交换、叠加混合等情况下运行良好，那么就不用太担心！只要在下一款游戏编程时牢记这些事项即可...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a href="Bitwise_Operators.htm">Bitwise Operators</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>