<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>缓冲区使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">缓冲区使用指南</span></h1>
  <p>缓冲区（在程序设计中）基本上是系统内存中的一个空间，用于存储几乎任何东西的小数据包（例如：数据传输、碰撞、颜色数据等）。由于缓冲区位于系统内存中，因此访问速度非常快，一般用于非常短期的存储，如在处理网络信息前接收网络信息，或用于存储游戏中的检查点（本页下方的示例对此进行了解释）。</p>
  <p><img alt="Buffer Memory" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Memory.png" />缓冲区是通过在系统内存中分配一个空间来创建的，计算单位是<a class="glossterm" data-glossterm="字节" href="#">字节</a>，只要游戏还在运行，这个空间就会保留给游戏，直到您使用相应函数删除缓冲区为止（您可以在<a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">这里</a>找到列出的所有 GML 缓冲区函数）。这意味着，即使您的游戏不在焦点上（例如，在移动设备上，当您接听电话时，游戏将进入后台），缓冲区仍然存在，但如果游戏关闭或重新启动，缓冲区就会丢失。</p>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> 重启游戏不会清除或删除缓冲区！但它会阻止对之前创建的缓冲区的任何进一步访问，因为 ID 句柄会丢失，从而导致内存泄漏，最终导致游戏崩溃。因此，在重新启动游戏时，请记得先删除任何缓冲区。</p>
  <p><span data-keyref="GameMaker 名称">GameMaker</span> 允许创建四种不同的缓冲区类型。这样做的原因是，缓冲区被设计为高度优化的临时存储介质，因此您应该创建一个适合您希望它存储的数据类型的缓冲区，否则您可能会出错或导致代码瓶颈。在进一步解释之前，我们先来看看四种可用的缓冲区类型（在 GML 中定义为常量）：</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>常量</th>
        <th>说明</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td>以字节为单位大小固定的缓冲区。大小在创建缓冲区时设定，不能再次更改。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td>缓冲区会随着数据的添加而动态增长。创建缓冲区时，需要设定一个初始大小（该大小应与预计存储的数据大小近似），然后缓冲区将不断扩大，以接受超出初始大小的更多数据。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td>数据将被覆盖的缓冲区。当添加的数据达到缓冲区大小的极限时，覆盖的数据将被放回缓冲区的起点，并从该点开始继续写入。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td>这是一个特殊的 &quot;精简 &quot;缓冲区，读/写速度极快。不过，它只能与 buffer_u8 数据类型一起使用，而且必须以 1 字节对齐。(有关数据类型和字节对齐方式的信息可在本页下方找到）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>这些就是您在使用 <span data-keyref="GameMaker 名称">GameMaker</span> 时可以使用的缓冲区类型，您选择哪种缓冲区在很大程度上取决于您希望将其用于何种用途。例如，增长缓冲区可用于存储数据的 &quot;快照&quot;，以创建保存游戏，因为您不知道要放入缓冲区的实际数据量；快速缓冲区可用于您知道要处理的值都在 0 至 255 或 -128 至 127 之间时，例如处理图像的 <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> 数据时。</p>
  <p><img alt="Buffer Types" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Types.png" />创建缓冲区时，应尽量选择与类型相适应的大小，一般规则是创建的缓冲区应能容纳要存储的数据的最大大小，如果有疑问，应使用增长缓冲区来防止覆盖错误。</p>
  <p>创建缓冲区的实际代码如下：</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p>这将创建一个 16384 字节的固定缓冲区，字节对齐为 2，函数返回一个唯一的 ID 值，该值存储在一个变量中，以便以后引用该缓冲区。</p>
  <p>When reading and writing data to a buffer, you do it in &quot;chunks&quot; of data defined by their &quot;data type&quot;. The &quot;data type&quot; sets the number of bytes allocated within the buffer for the value being written, and it is essential that you get this correct otherwise you will get some very strange results (or even errors) for your code.</p>
  <p>Buffers are written to (and read from) <strong>sequentially</strong>, in that one piece of data is written after another, with each piece of data being of a set type. This means that you should ideally be aware of what data you are writing to the buffer at all times. These data types are defined in GML by the following constants:</p>
  <div data-conref="../assets/snippets/buffer_data_type_constants.hts"> </div>
  <p>So, say you have created a buffer and you want to write information to it, then you would use something like the following code:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>looking at the example above you can see that you can write different types of data to a buffer at the same time (you are only limited to a specific data type when using the <em>fast </em>buffer type), and this data will be added into the buffer sequentially (although its actual position in the buffer will depend on its byte-alignment, explained below). This is the same for reading information from the buffer too, and in the case of the example given above, you would read from the buffer in the same order that you wrote the data, checking for the same data type, e.g.:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>As you can see, you read out information in the same order that you read it into the buffer. For further information on how to add and remove data from the buffer please see the examples given below.</p>
  <p>If you have been reading through this page you will have seen references to the <strong>byte-alignment </strong>of a buffer. This basically refers to the position that new data will stored at within a given buffer. How does this work? Well, for a single byte aligned buffer, each piece of data is written to the buffer sequentially, with each new data piece being added directly after the previous. However a 2 byte aligned buffer will write each piece of data to intervals of 2 bytes, so that even if your initial write is 1 byte of data, the next write will be moved to align to two bytes:</p>
  <p><img alt="Buffer Byte Alignment" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Byte_Alignment.png" />So, if your byte-alignment is set to, say, 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer <strong>tell </strong>(a tell gets the current position for reading/writing for the buffer), you&#39;ll get an <strong>offset </strong>of 1 byte (the offset in this case is the number of bytes from the start of the buffer to the current read/write position).</p>
  <p>However, if you write another piece of data, also 1 byte in size, <em>then </em>do a buffer tell, you&#39;ll get an offset of 5 bytes (even though you have only written 2 bytes of data) as the alignment has padded the data to align it with the 4 byte buffer alignment.</p>
  <p>Basically, what this means is that alignment will only affect <em>where </em>things are written to, so if you do a buffer tell after you write something, it&#39;ll return the current write position which immediately follows the data you&#39;ve previously written. Note, however, that if you then write another piece of data, internally the buffer will move the write position along to the next multiple of the alignment size before actually writing the piece of data.</p>
  <p>Below we have a couple of examples of how to use buffers in a project:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Buffer Checkpoint</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">A simple example of how a buffer can be used in any <span data-keyref="GameMaker 名称">GameMaker</span> game for any platform, is the function <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. This function will take a &quot;snapshot&quot; of the current game state and save it to a pre-defined buffer, which can then be read from to load the game at that point again.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> This function is very limited and it is designed for the beginner to get a checkpoint system up and running quickly, but more advanced users may prefer to code their own system using the File functions, due to the fact that the game will not save any of the dynamic resources that you can create at run-time like data structures, surfaces, added sprites, etc...</p>
    <p class="dropspot">The first thing we need to do is create a new object to control the saving and loading, so you would make one and give it a <strong>Create Event</strong>. In this event, you could place the following code:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">The first line creates a grow buffer (since we don&#39;t know the final size of the saved data) of 1024 bytes and aligned to 1 byte. A variable is then created to check against and see if the game has been saved or not (this will be used for loading).</p>
    <p class="dropspot">Next we would add a <strong>Keypress Event</strong> (for example) in which we will save the current game state to the created buffer:</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">The above will first set the control variable to <span class="inline">true </span>(so that this is saved when we save the game to the buffer) and then seek to the start of the buffer before writing the current save state into it. Why do we use <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Well, as mentioned already on this page, you read and write to a buffer from the last position that data was added to it. This means that if you don&#39;t set the buffer tell back to the start then when you save you will be adding the data into the buffer at the current buffer read/write position. So, we use the function <span class="inline">buffer_seek()</span> to move the tell to the buffer start.</p>
    <p class="dropspot">We have now saved the current game state to a buffer. The next step would be to code how to load it, probably in another <strong>Keypress Event</strong>:</p>
    <p class="code">if StateSaved<br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">The game will then be loaded at the end of the event in which you place the above code.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> This is only for use in the same room, and not for generating complete saved games for after your game has been closed or restarted!</p>
    <p class="dropspot">The final thing to add to the controller object is some &quot;clean up&quot; code. Buffers are stored in memory and as such if you do not clean up when you are finished with them, you can get memory leaks that will eventually lag and crash your game. So you would probably add a <strong>Room End Event</strong> (from the <strong>Other</strong> event category) with:</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">This object can now be placed into a room and on a key press save and load the room state from a buffer.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Network Buffers</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">When working with the <span data-keyref="GameMaker 名称">GameMaker</span> <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">networking functions</a>, you have to use buffers to create the data packet that is being sent over the network connection. This example intends to show how this is done, but due to the scope of the networking possibilities, it is only designed to show how to use the buffers themselves, and not the full networking system.</p>
    <p class="dropspot">The first thing we will show is the creation and use of a buffer for the client side of the network connection. This buffer will be used to create small data packets that can then be sent to the server, so in the <strong>Create Event</strong> of an instance we would assign a buffer like this:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">We make the buffer small (256 bytes) - as it is not intended for holding large amounts of data - then we make it a grow buffer to ensure no errors should we need to add more data to be sent at any time, and the alignment is set to one for convenience.</p>
    <p class="dropspot">Now, let&#39;s say that we want our client to send data to the server. For that we need to create a buffer &quot;packet&quot;, and in this example we are going to send a <strong>Key Press Event</strong>, like when the player presses <em>Left Arrow </em>to move around the game. To do this we write the necessary data to the buffer first then send it off:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Before writing to the buffer we have set the &quot;tell&quot; to the start of the buffer as networking always takes the data from the start of a buffer. We then write the check value (this will be used by the server to determine the type of event to be processed), then the key being used, and then the state of the key (in this case true for pressed). This buffer is then sent as a data packet by the network function. Note that we do not send the whole buffer! We only send the data written, using the buffer_tell function to return the current read/write position of the buffer (remember that writing to the buffer moves the &quot;tell&quot; to the end of what has been written). This is simply to avoid sending more bytes than is necessary.</p>
    <p class="dropspot">What about receiving the data on the server? The received data packet that must be written into the buffer on the server and then used to update the game. For that we would use the <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">Networking Asynchronous Event</a> in the network controller object of the server, as this simplified code below shows:</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if cmd == buffer_read(buff, buffer_u8);<br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">The asynchronous event will contain a special temporary DS map <span class="inline">async_load</span> (it is removed from memory at the end of the event automatically) which contains different information depending on the type of incoming data from the network. In this case, we are assuming that the map has been checked and found to be a buffer data packet sent from a client. We now check the first piece of data that is in the buffer to see what kind of event has been sent - in this case the value &quot;1&quot; represents a key event, however when coding these things you should define constants to hold these values to simplify things - and then store the key being pressed and its state (<span class="inline">true</span> = pressed, <span class="inline">false</span> = released). This information would then be used to update all the clients with the new status of the sending client player.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> The buffer that is created from the DS map is automatically removed at the end of the Network Asynchronous Event so there is no need to use <span class="inline" style="font-size: 14px">buffer_delete()</span> here.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a href="Bitwise_Operators.htm">Bitwise Operators</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>