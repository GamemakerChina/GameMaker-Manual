<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>关于基本形状和顶点构建的指南</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">关于基本形状和顶点构建的指南</span></h1>
  <p cid="n3" mdtype="paragraph"><span>这篇指南简要介绍了如何使用自定义的</span><span><strong><span>顶点格式</span></strong></span><span>和</span><span><strong><span>顶点缓冲区</span></strong></span><span>构建和使用<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基本图形</a>。</span></p>
  <p><span>通常当你开始使用3D、特效、复杂的绘图过程或着色器时，你不需要过多担心所使用的顶点格式，因为GameMaker会自动设置并传递</span><span><a href=""><span></span></a><a class="glossterm" data-glossterm="顶点" href="#">顶点</a></span><span>数据给你。然而，有时需要创建自己的顶点数据并对其进行格式化，特别是在需要提高速度或希望传递额外信息的情况下。例如，标准的顶点格式包括x、y、z 3D位置、颜色（带alpha通道）和UV纹理坐标，如果你要自己创建它，会看起来像这样：</span></p>
  <h4 id="passthrough_vertex_format">传递顶点格式:</h4>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_texcoord();<br />
    my_format = vertex_format_end();</p>
  <p>然而，如果你只是使用（例如）一个着色器来操作顶点的位置，那么就没有必要传递颜色或纹理数据。在这种情况下，你将按照以下方式创建自己的格式：</p>
  <h4>自定义顶点格式：</h4>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>总共有五种不同的顶点属性可在定义顶点格式时使用：</p>
  <ul class="colour">
    <li>Colour</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D Position</li>
    <li>Texture coordinate</li>
  </ul>
  <p>一般来说，你必须始终提供位置或3D位置作为格式的一部分，但其他属性都是可选的。</p>
  <p>你应该注意，一旦你创建了顶点格式，定义顶点属性的顺序必须在构建基本图形时得到尊重。因此，如果你已经定义了一个顶点格式，其中包括位置、颜色和纹理坐标，那么你必须按照相同的顺序向基本图形添加这些属性，否则将会出现错误。另外要注意，像其他任何动态资源一样，顶点格式需要内存，因此在不需要时应使用<span class="inline3_func"><a data-xref="{title}" href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm">vertex_format_delete</a></span>函数将其删除。</p>
  <p>你构建的任何基本图形都保存在一个顶点缓冲区中。这个缓冲区必须事先创建，并在用于构建基本图形的函数中引用。顶点缓冲区可以被重复使用多次来创建不同的基本图形，或者可以被“冻结”以在游戏或关卡期间保持特定的基本图形类型（这是最快的方法，所以如果你知道构建的基本图形不会改变，那么应该始终使用这个选项）。</p>
  <p>以下是构建单个三角形基本图形的示例代码：</p>
  <p class="code_heading">创建事件</p>
  <p class="code">v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);</p>
  <p class="code_heading">绘制事件</p>
  <p class="code"><br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();</p>
  <p>在这里，我们首先在实例的创建事件中创建了我们的顶点缓冲区，然后开始定义组成我们三角形基元的不同顶点，为我们想要使用的每个三个点提供位置、颜色和纹理UV坐标。然后我们结束顶点定义，并且我们知道具有这些顶点数据的顶点缓冲区存储在变量&quot;v_buff&quot;中。</p>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> 如果顶点缓冲区的内容将不断更新，它将在同一步骤中被创建、提供顶点数据，然后在绘制后再次被销毁。</p>
  <p>然后我们在绘制事件中使用着色器绘制顶点缓冲区的内容。这是一个非常简单的例子，基本上就是 <span data-keyref="GameMaker 名称">GameMaker</span> 内部的工作原理，即：当你绘制一个精灵时，<span data-keyref="GameMaker 名称">GameMaker</span> 会创建一个具有四个顶点（构成两个三角形，也称为&quot;quad&quot;）的顶点缓冲区，并将这两个三角形纹理化为精灵图像。当我们绘制此精灵时，实际上是提交了顶点缓冲区，从而将其内容绘制到屏幕上。</p>
  <p>当我们提交顶点缓冲区进行绘制时，您会注意到我们提供了一个基本类型。您可以使用的基本类型包括点、线列表或带、三角形列表或带，但不允许使用三角形扇形，因为大多数移动硬件不接受该基本类型。不要忘记根据将用于绘制的基本类型正确格式化您的顶点缓冲区。例如，将两个三角形作为三角形列表绘制需要6个点，但作为三角形带只需要4个点。您可以自行决定使用哪种类型，这取决于您想要绘制什么以及您想要实现的效果。</p>
  <p>当以这种方式使用自己的顶点缓冲区时，最后一个重要的要点是要注意它如何影响发送到GPU的顶点批处理。创建顶点缓冲区时，您正在创建图形数据的最低级别，因此在绘制时 <span data-keyref="GameMaker 名称">GameMaker</span> 只是直接将您的缓冲区发送到显卡。因此，如果您想要更好的批处理，您必须自行解决此问题，并将想要批处理的内容存储在同一缓冲区内。</p>
  <p>正如我们之前提到的，顶点格式是通过使用以下5种属性类型（通过适当的<span class="inline3_func">vertex_format_add_*</span>函数添加）来构建的：</p>
  <ul class="colour">
    <li>Colour</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D Position</li>
    <li>Texture coordinate</li>
  </ul>
  <p>在GLSL ES着色器中，可以使用以下4种属性来识别这些类型：</p>
  <ul class="colour">
    <li>Colour</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Texture coordinate</li>
  </ul>
  <p>现在，这看起来可能有些奇怪，因为我们似乎可以在顶点格式中指定更多的属性种类，而在顶点着色器中却不能。然而，在着色器中，位置和3D位置被视为相同的属性，只是位置属性预期只有&quot;x&quot;和&quot;y&quot;坐标，而3D位置属性则包括&quot;x&quot;、&quot;y&quot;和&quot;z&quot;坐标。那么，如何将顶点格式中的内容映射到着色器中定义属性的方式呢？让我们从查看默认着色器的典型属性集开始。</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>这是一段设置与此着色器兼容的顶点格式的代码块：</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_texcoord();<br />
    my_format = vertex_format_end();</p>
  <p>现在，着色器属性是如何与顶点格式类型匹配的？这仅仅基于命名约定：</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> 对应于 <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> 对应于 <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> 对应于 <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span></span> </span>现在，当您有多个相同类型的属性时情况会变得更加棘手，但是这些仍然基于相同的命名约定。现在我们将学习如何提供额外的颜色和纹理坐标，因为着色器或顶点格式中只能有一个位置和一个法线属性，但可以有多个颜色或纹理属性。</p>
  <p>当向您的着色器添加额外的颜色属性时，需要在着色器属性的末尾添加一个数字，以指示属性映射到顶点格式中的哪个特定条目。以下是一个示例 - 首先是顶点格式：</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_texcoord();<br />
    my_format = vertex_format_end();</p>
  <p>现在是相关的着色器属性：</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>在这种情况下，<span class="inline">in_Colour0</span> 映射到第一个 <span class="inline">vertex_format_add_colour</span>()，<span class="inline">in_Colour1</span> 映射到第二个。</p>
  <p>纹理坐标的处理方式与颜色略有不同。基本上，任何不被称为 <span class="inline">in_Position</span>、<span class="inline">in_Normal</span> 或其中一个 <span class="inline">in_Colour</span>[0 ... ] 属性的东西都被视为纹理坐标。它们在着色器属性列表中定义的顺序决定了它们在顶点格式中的映射关系。请参阅以下 GML 代码示例：</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_texcoord();<br />
    vertex_format_add_texcoord();<br />
    vertex_format_add_texcoord();<br />
    my_format = vertex_format_end();</p>
  <p>着色器代码将类似于以下内容：</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>在此示例中，<span class="inline">in_myTexcoord</span>、<span class="inline">in_TextureCoord</span> 和 <span class="inline">in_Something</span> 分别映射到顶点格式中定义的三个连续的纹理坐标属性。</p>
  <p>您可以在以下页面找到创建顶点格式、顶点缓冲区和图元所需的所有函数的完整列表：</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基本形状和顶点格式</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a href="Guide_To_Using_Blendmodes.htm">Guide To Using Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>