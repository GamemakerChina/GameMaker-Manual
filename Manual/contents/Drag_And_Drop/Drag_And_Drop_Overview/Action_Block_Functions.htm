<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>动作模块脚本函数</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Article explaining how to make action block script functions" />
  <meta name="rh-index-keywords" content="GML Visual Overview - Action Block Script Functions" />
  <meta name="search-keywords" content="GML Visual Scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">动作模块脚本函数</span></h1>
  <p><a href="../../The_Asset_Editors/Scripts.htm">脚本</a>资产是 <a data-xref="{title}" href="../../Introduction/The_Asset_Browser.htm">The Asset Browser</a> 中最重要的资产之一。脚本是一种特殊的资产，因为脚本本质上是用户定义函数的 &quot;容器&quot;，其本身并不会在游戏中被直接调用。所有脚本都是全局范围的，<span data-keyref="GameMaker 名称">GameMaker</span> 会在游戏启动时自动运行，因此您可以用它们来定义全局变量和函数，以便在整个游戏中使用。</p>
  <p>每个 <span data-keyref="GML_Visual">GML 可视化</span> 脚本都可以添加一个或多个用户定义的函数，这些函数是使用 <a data-xref="{title}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a> 操作创建的：</p>
  <p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" />您在这里定义的函数将是全局范围的，其作用与任何内置的 <span data-keyref="GML_Visual">GML 可视化</span>动作一样，即：它们可以接受不同的值--或根本不接受--称为 <a class="glossterm" data-glossterm="参数" href="#">参数</a> ，然后执行任务，根据需要返回值或不返回任何值。然后，您将使用 <a data-xref="{title}" href="../Drag_And_Drop_Reference/Common/Function_Call.htm">Function Call</a> <img alt="Function Call Icon" class="icon" height="24" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/i_Execute_Function.png" style="cursor: nwse-resize;" width="24" /> 操作在游戏中调用该函数，操作如下：</p>
  <p><img alt="Function Call Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Common_Execute_Function.png" />要创建 <span data-keyref="GML_Visual">GML 可视化</span> 脚本，只需在 <a data-xref="{title}" href="../../Introduction/The_Asset_Browser.htm">The Asset Browser</a> 中的任意位置使用鼠标右键 <img alt="RMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_RMB.png" width="21" /> ，选择<strong>创建</strong>，然后选择<strong>脚本</strong>。这将创建一个新的 <span data-keyref="GML_Visual">GML 可视化</span> 脚本，并打开编辑器窗口：</p>
  <p><img alt="D&amp;D Script editor" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Scripts.png" />你可以在 <a data-xref="{title}" href="../../Introduction/The_Asset_Browser.htm">The Asset Browser</a> 中右键 <img alt="RMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_RMB.png" width="21" /> 单击脚本并选择 &quot;重命名&quot;（或缓慢左键双击 <img alt="LMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_LMB.png" width="21" />）来为脚本命名，但请注意，脚本名称必须符合资产的一般规则，因此必须以字母开头，且只能包含字母、数字或 &quot;_&quot; 下划线符号。脚本中还会预填一个 <a data-xref="{title}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a> 操作，供您填写，您还可以根据需要添加更多的函数声明（一个脚本可以容纳多个函数，这对于将具有相似或相关用途的函数组合在一起非常有用）。</p>
  <p>如上所述，您可以向函数传递多个参数，函数将使用这些参数来执行您编写的任务。为了更好地理解这一点，请以任何一个内置操作为例，想想它是如何工作的......你将它放入一个事件中，并提供一些值，它就会让你的实例做一些事情。用户自定义函数与此完全相同，唯一的区别在于它们是由用户编写的。</p>
  <p>定义新函数时，需要给函数命名，如果需要参数，还需要定义参数的名称（函数可以不带参数，也可以带多个参数，具体取决于您的要求）。如果给出了参数名，那么这些参数将在函数调用的操作中作为局部变量使用，并保存函数的输入值。</p>
  <p>同样好的做法是，按照 <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JSDoc 规则</a>，为操作添加注释，解释其作用。例如，考虑一下 <span class="inline">set_vec()</span> 这个函数：</p>
  <p><img alt="D&amp;D Function Example With Comments" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_FunctionExample.png" />要调用上述脚本，您只需使用 <a data-xref="{title}" href="../Drag_And_Drop_Reference/Common/Function_Call.htm">Function Call</a> 操作，就像这样：</p>
  <p><img alt="Call A Function From A Script" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Declare_Function_2.png" />您不仅可以向函数传递参数，还可以要求函数返回值（使用 <a data-xref="{title}" href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a> <img alt="Return Action Icon" class="icon" height="24" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/i_Return.png" width="24" /> 操作），因此您可以使用函数（例如）构建计算方法或在复杂的碰撞检测或其他任何操作后返回实例 ID。但请注意，使用该操作将结束函数，因此在使用该函数后，将不会执行任何操作，这就意味着您必须对函数的结构进行一定的思考。</p>
  <p>下面是一个返回值的 <span data-keyref="GML_Visual">GML 可视化</span> 函数：</p>
  <p><img alt="D&amp;D Script Return Example" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Script_Example_Return.png" /></p>
  <p>上面的函数只是简单地检查房间里的所有实例，看看它们的 <span class="inline">object_index</span> 是多少，如果其中一个是玩家对象，函数将返回 <span class="inline">true</span>（结束函数调用）或 <span class="inline">false</span>。你可以这样调用这个函数：</p>
  <p><img alt="Call D&amp;D Script With Return Value" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Script_Call_Return.png" />因此，我们调用函数，让它创建一个临时（局部）变量来存储返回值（在本例中为 true 或 false），然后检查该变量并采取相应的操作。</p>
  <p>您也可以将参数设为可选参数并定义默认值，这样，如果函数调用中没有提供参数，就会使用默认值。更多信息，请参阅 <a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">Extended Example 2</a>。</p>
  <p>在为 <span data-keyref="GML_Visual">GML 可视化</span> 脚本制作函数时，您可以使用与在对象事件中添加动作时相同的所有动作，甚至可以在函数中调用函数，并以这种方式创建更 &quot;模块化 &quot;的动作代码。通过这种方式使用函数构建脚本，可以为您节省大量创建相同动作序列的时间，还有助于使您的动作序列更易于阅读和调试。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../../Content.htm">Index</a></div>
        <div style="float:right">Next: <a href="Changing_DnD_To_Code.htm">Changing GML Visual To Code</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>