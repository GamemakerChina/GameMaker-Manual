<?xml version="1.0" encoding="UTF-8"?>        
<glossgroup id="Default">          <title>Glossary Definitions</title>        <glossentry id="Default_API"><glossterm>API</glossterm><glossdef>API &quot;是应用程序编程接口（Application Programming Interface）的缩写，指的是用于构建软件应用程序的规则、例程和协议集。API 有助于与第三方程序或服务进行通信，可用于构建不同的软件。Facebook 和 Twitter 等公司积极使用 API 来帮助开发人员更轻松地访问他们的服务，而在 GameMaker Studio 2 中，当谈到扩展时，你会看到 API 的缩写，例如 Google Play Services API 或 Amazon Game On API。</glossdef></glossentry><glossentry id="Default_ARGB"><glossterm>ARGB</glossterm><glossdef>这是 Alpha、Red、Green、Blue 的首字母缩写，用于指代以十六进制值指定的颜色成分，例如 #FF53E270： #FF53E270，其中每组两位数代表一个成分。将上述 ARGB 示例分解后，我们可以得到以下成分值： 阿尔法（FF）、红色（53）、绿色（E2）和蓝色（70）。</glossdef></glossentry><glossentry id="Default_catmull-rom_interpolation"><glossterm>catmull-rom 插值</glossterm><glossdef>这是一种基于数学花键的非线性插值法。它通过使用 &quot;平滑 &quot;曲线（样条曲线）连接两个相邻的已知值来估算新值，新值可以从沿线的任意点得出。</glossdef></glossentry><glossentry id="Default_CPU_overhead"><glossterm>CPU 开销</glossterm><glossdef>CPU 开销衡量的是计算机中央处理单元可执行的工作量，以及单个计算任务使用该能力的百分比。</glossdef></glossentry><glossentry id="Default_DNS"><glossterm>DNS</glossterm><glossdef>域名系统 - 该系统将域名（如 gamemaker.io）与其他信息（如 IP 地址）关联起来。DNS 记录通过 DNS 查询返回。</glossdef></glossentry><glossentry id="Default_Dope_Sheet"><glossterm>Dope Sheet</glossterm><glossdef>Dope Sheet 是序列时间线的可视化表示，您可以在这里添加、删除和编辑不同的资产键和参数键，这些键会影响序列中不同音轨随时间推移的行为。</glossdef></glossentry><glossentry id="Default_EULA"><glossterm>EULA</glossterm><glossdef>最终用户许可协议（EULA）是一份法律文件，其中概述了您获得的产品许可。</glossdef></glossentry><glossentry id="Default_falsy"><glossterm>falsy</glossterm><glossdef>用作布尔值时被视为 &quot;false &quot;的值，例如在 if() 条件中。</glossdef></glossentry><glossentry id="Default_GameMaker:_Studio 1.4"><glossterm>GameMaker: Studio 1.4</glossterm><glossdef>GameMaker 软件的旧版本（通常称为 Legacy GameMaker），已不再提供或支持。</glossdef></glossentry><glossentry id="Default_gizmos"><glossterm>gizmos</glossterm><glossdef>Gizmo 是可直接操作的、自包含的、可视化屏幕习语--基本上是任何可视化的东西，用户可以与之交互或操纵，以产生效果或特定结果。</glossdef></glossentry><glossentry id="Default_GUI"><glossterm>GUI</glossterm><glossdef>图形用户界面（Graphical User Interface）的简称，是一种包含图形元素（如窗口、图标和按钮）的用户界面。在 GameMaker 中，有一组特定的对象事件（绘制图形用户界面事件）可以绘制到这一层，这些事件是专门为分数、生命值、库存等设计的...</glossdef></glossentry><glossentry id="Default_HVS"><glossterm>HSV</glossterm><glossdef>这是色调、饱和度和数值的缩写，通常使用 0 到 255 之间的数值来表示颜色。色调是颜色的色相值，饱和度是使用颜色的数量，而数值则是颜色的亮度。</glossdef></glossentry><glossentry id="Default_HUD"><glossterm>HUD</glossterm><glossdef>在游戏中，HUD 是抬头显示器的缩写。作为游戏用户界面的一部分，这是一种将信息直观地传递给玩家的方法，因此健康条、状态图标、分数等都是 HUD 的一部分，通常情况下，HUD 元素不需要用户交互。</glossdef></glossentry><glossentry id="Default_IDE"><glossterm>IDE</glossterm><glossdef>集成开发环境，即IDE，是一种为计算机程序员提供软件开发综合设施的软件应用程序。在本例中，GameMaker Studio 2 的整个前端都被视为集成开发环境，包括创建图形、添加声音和添加代码以制作游戏的部分。</glossdef></glossentry><glossentry id="Default_JSON"><glossterm>JSON</glossterm><glossdef>JSON 是 JavaScript Object Notatio 的缩写，是一种用于存储数据的轻量级格式。JSON 通常用于将数据从服务器发送到网页，被认为是 &quot;自描述 &quot;格式，在浏览时易于理解和遵循。</glossdef></glossentry><glossentry id="Default_RSS"><glossterm>RSS</glossterm><glossdef>是 &quot;Rich Site Summary（丰富网站摘要）&quot;的缩写，是一种标准化系统，用于从在线出版商向互联网用户分发内容。</glossdef></glossentry><glossentry id="Default_Runtime"><glossterm>Runtime</glossterm><glossdef>GameMaker 中的运行时是程序为特定目标平台创建最终可执行程序包所需的编译器资产的集合。它们与集成开发环境分开安装，可随时更改和更新。</glossdef></glossentry><glossentry id="Default_SCM"><glossterm>SCM</glossterm><glossdef>SCM 是源代码控制管理（Source Control Management）的缩写，是一个负责维护项目源代码版本的程序（或程序套件）。SCM 允许你存储代码更改的运行历史，以及审查和撤销对源代码所做的任何更改等。</glossdef></glossentry><glossentry id="Default_SDK"><glossterm>SDK</glossterm><glossdef>SDK 是 &quot;软件开发工具包 &quot;的缩写。这通常是指用于为特定设备或操作系统开发应用软件或软件包的集合。</glossdef></glossentry><glossentry id="Default_truthy"><glossterm>truthy</glossterm><glossdef>当作为布尔值使用时，例如在 if() 条件中，被视为 &quot;true &quot;的值。</glossdef></glossentry><glossentry id="Default_typo"><glossterm>typo</glossterm><glossdef>排版错误</glossdef></glossentry><glossentry id="Default_URL"><glossterm>URL</glossterm><glossdef>是 &quot;通用资源定位器 &quot;的缩写，基本上是互联网上某事物的地址。</glossdef></glossentry><glossentry id="Default_v-sync"><glossterm>v-sync</glossterm><glossdef>V-sync 或垂直同步用于将游戏更新速度与显示器的刷新率同步。这可以减少屏幕撕裂（即屏幕一次性显示多个帧的部分内容），但也会导致性能问题或高刷新率显示器的问题。</glossdef></glossentry><glossentry id="Default_VRAM"><glossterm>VRAM</glossterm><glossdef>VRAM 是可用于视频的内存量，即：可存储纹理和图像的内存空间。</glossdef></glossentry><glossentry id="Default_YoYo_Compiler"><glossterm>YoYo 编译器 (YYC)</glossterm><glossdef>这是一种特殊的编译器，用于创建使用本地代码而不是解释代码的运行程序（GameMaker VM 编译使用的就是本地代码和运行程序）的可执行文件包。编译后的代码运行速度更快，但编译可执行文件需要更多时间。</glossdef></glossentry><glossentry id="Default_bitmap"><glossterm>位图</glossterm><glossdef>位图是用来描述任何由彩色像素组成的静态图像的术语，这些像素以位的形式存储（与使用数学算法存储的矢量图像不同）。PNG、JPG 和 BMP 是位图图像的例子，而 SWF 则是矢量图像的例子。</glossdef></glossentry><glossentry id="Default_keyframe"><glossterm>关键帧</glossterm><glossdef>关键帧（也称为参数关键帧）是时间轴上的一个点，在这个点上定义了参数值的变化。</glossdef></glossentry><glossentry id="Default_keyword"><glossterm>关键词</glossterm><glossdef>关键词是编程语言或程序保留的特殊词汇，因为它们具有特殊含义。保留这些关键字是为了执行某些任务，它们可以是命令，也可以是参数。每种编程语言都有一组不能用作变量名的保留关键字（也称为保留名），GameMaker 语言也不例外，其中 return、while、if 和 break 等词都是编程语言中使用的保留关键字。</glossdef></glossentry><glossentry id="Default_frontend"><glossterm>前端</glossterm><glossdef>前端是程序中 &quot;面向前端 &quot;的部分，即：最终用户与之交互的部分。例如，在 GameMaker Studio 2 中，您进行编程和添加资产等操作的界面就是程序的前端，因为这是您与程序交互、输入数值和文件等的地方。这基本上是后端的对立面。</glossdef></glossentry><glossentry id="Default_compression"><glossterm>压缩</glossterm><glossdef>压缩是使用数学算法来减小文件的大小。这种方法尤其适用于音频和图像文件，JPG（图像）和 MP3（音频）等格式都属于压缩格式。压缩后的文件大小通常会小得多，但也会造成一些数据损失，这些损失可能会很明显，也可能不明显，这取决于所使用的压缩类型和强度。未压缩的格式是 BMP（图像）或 WAV（音频），它们的文件大小更大，但不会丢失数据。</glossdef></glossentry><glossentry id="Default_argument"><glossterm>参数</glossterm><glossdef>参数（也称为参数）是指传入函数的值。例如，GameMaker 语言函数 &quot;sqr(num) &quot;可以求出作为参数的数字的平方，例如：&quot;a = sqr(4); &quot;这里的参数是 4，函数将返回 16，并存储在变量 &quot;a &quot;中。</glossdef></glossentry><glossentry id="Default_parameter_key"><glossterm>参数关键帧</glossterm><glossdef>参数关键帧（也称关键帧）是时间轴上的一个点，在这个点上定义了参数值的变化。</glossdef></glossentry><glossentry id="Default_parameter_tracks"><glossterm>参数轨道</glossterm><glossdef>在轨道面板中分配给资产轨道的轨道，可更改与之链接的资产轨道的单一参数，如位置或图像索引。</glossdef></glossentry><glossentry id="Default_variable"><glossterm>变量</glossterm><glossdef>变量是程序中的一个命名值，可以根据需要随时修改、存储和显示。例如，如果我们有一个名为 XYZ 的整数变量，它存储的值是 10，那么我们就可以执行 A = XYZ + 10 这样的操作，这将把变量 A 的值设置为 20，因为 XYZ 是 10，而我们要给它加上 10。您还可以使用运算符更改变量值，因此执行 XYZ = XYZ + 100 将修改 XYZ 变量的值，使其等于 110。变量还可以用来存储不同资产的标识符和引用。</glossdef></glossentry><glossentry id="Default_executable_package"><glossterm>可执行软件包</glossterm><glossdef>用于执行程序的文件包。在 GameMaker Studio 中，它可以是单个文件（如 Windows 的安装程序），也可以是多个文件（如 HTML5 输出）。</glossdef></glossentry><glossentry id="Default_backend"><glossterm>后端</glossterm><glossdef>后端是程序在后台执行的部分，对用户不透明，通常不需要任何用户交互。例如，在互联网上进行网络编程时的服务器端，或 RPG 游戏中的幕后数据处理。这基本上是前端的对立面。</glossdef></glossentry><glossentry id="Default_callback"><glossterm>回调</glossterm><glossdef>回调只是一个函数，当它完成分配给它的任务后，就会运行并触发另一个函数（或代码块）。例如，sprite_add() 函数将在加载精灵时触发异步图像加载事件中的回调。</glossdef></glossentry><glossentry id="Default_tile_map"><glossterm>图块地图</glossterm><glossdef>图块地图是从图块集中提取的图块集合，用于创建游戏关卡。</glossdef></glossentry><glossentry id="Default_tile-sets"><glossterm>图块集</glossterm><glossdef>图块集是一组正方形或长方形图形资产的集合，以单个图像的形式布局在网格上。网格中的每个项目都可以在房间中多次放置，从而创建一个更大的场景，称为 &quot;图块地图&quot;。</glossdef></glossentry><glossentry id="Default_garbage_collector"><glossterm>垃圾收集器</glossterm><glossdef>垃圾收集器是一种自动工具，是游戏代码的一部分，用于在代码中不再引用某些东西（如数组和结构体）时将其从内存中删除，而无需您明确删除。</glossdef></glossentry><glossentry id="Default_font"><glossterm>字体</glossterm><glossdef>字体是一种语言中用来表示文本的图形字形的集合。字体可以有不同的重量、大小和样式，用于显示项目中的任何书面内容。</glossdef></glossentry><glossentry id="Default_glyph"><glossterm>字形</glossterm><glossdef>字形是字符的一种特殊视觉外观。它是使用特定字体时字符的外观。</glossdef></glossentry><glossentry id="Default_byte"><glossterm>字节</glossterm><glossdef>一个字节是一个数据单位，长度为 8 个二进制位，组成一个字节的每个位都称为比特，即：一个字节为 8 个比特，一个比特可以是 1 或 0。</glossdef></glossentry><glossentry id="Default_literal"><glossterm>字面量</glossterm><glossdef>在代码中写入的明确值，例如，当您写入 &quot;A TEXT STRING &quot;时，您使用的是字符串字面量，而不是通过变量或函数返回字符串。同样，[0, 1, 2] 是一个数组字面量。</glossdef></glossentry><glossentry id="Default_boolean"><glossterm>布尔</glossterm><glossdef>布尔是一种变量类型，可以根据其值返回 &quot;真 &quot;或 &quot;假&quot;，并可用于条件和表达式中。常量 &quot;false &quot;或 &quot;true &quot;可以应用于布尔型变量，相当于实数值 0 和 1。</glossdef></glossentry><glossentry id="Default_constants"><glossterm>常量</glossterm><glossdef>常量是一个术语，用来描述在程序执行过程中不会改变的命名值。GameMaker Studio 2有许多内置常量，例如os_windows，但你也可以创建自己的常量值，用于你的项目（称为宏）和扩展。</glossdef></glossentry><glossentry id="Default_smooth_interpolation"><glossterm>平滑内插法</glossterm><glossdef>平滑内插法是用数学生成的样条曲线连接两个相邻的已知值，从而估算出一个新值。然后，您可以通过检查沿线上的任意点来获取插值。</glossdef></glossentry><glossentry id="Default_application_surface"><glossterm>应用表面</glossterm><glossdef>应用程序表面是一个特殊的内置表面，GameMaker Studio 2 会在游戏的 &quot;绘制事件&quot;（Draw Events）中将所有内容绘制到这个表面上（表面实质上是为图形预留的内存区域）。然后，在每个游戏帧结束时，这个曲面会被绘制到显示缓冲区，向玩家显示其内容。</glossdef></glossentry><glossentry id="Default_exception"><glossterm>异常</glossterm><glossdef>程序执行过程中遇到的特殊、意外和异常情况被称为异常。它也可以被称为错误或改变程序或微处理器运行方式的条件。异常的一个例子是，程序试图访问一个变量，但该变量并不存在。必须在程序代码中处理和消除异常，以避免任何致命错误，这一过程称为调试。</glossdef></glossentry><glossentry id="Default_weak_reference"><glossterm>弱引用</glossterm><glossdef>弱引用是一种无视被引用对象被垃圾回收器回收的引用，因此可用于检查结构体是否仍 &quot;活着&quot;（被引用）。</glossdef></glossentry><glossentry id="Default_anti-aliasing"><glossterm>抗锯齿</glossterm><glossdef>这是一种通过将边缘的颜色与周围像素的颜色混合来平滑锯齿状线条或纹理的技术。根据效果的强度，其结果应该是外观更加悦目和逼真。</glossdef></glossentry><glossentry id="Default_playhead"><glossterm>播放头</glossterm><glossdef>在序列表或精灵编辑器帧视图中时间轴上的当前 &quot;播放 &quot;位置。在序列（和精灵）中，该位置会随着动画的预览而移动，您可以将其放在特定帧上，以查看和编辑该位置上的键和关键帧。</glossdef></glossentry><glossentry id="Default_operand"><glossterm>操作数</glossterm><glossdef>操作数是一个术语，用来表示可以使用不同运算符进行操作的值。在表达式 A + B + C 中，A、B 和 C 是操作数。</glossdef></glossentry><glossentry id="Default_hashing"><glossterm>散列</glossterm><glossdef>散列是一种创建字符串或值的方法，这种字符串或值与单一来源（通常是文件）相关，并且只与该来源相关。例如，在 GameMaker 中，您可以为保存文件创建一个哈希值，然后在以后访问该文件之前，为其创建另一个哈希值，并检查原始哈希值和新哈希值，以确定文件是否被篡改。</glossdef></glossentry><glossentry id="Default_method"><glossterm>方法</glossterm><glossdef>在 GameMaker 中，方法是用户自定义函数的名称，该函数已绑定到实例上，因此实例变量就是函数的名称，也是调用函数时使用的变量。</glossdef></glossentry><glossentry id="Default_timeline"><glossterm>时间线</glossterm><glossdef>GameMaker Studio 2 中的时间线是按连续顺序运行的事件的线性集合。每个事件都可以赋予代码或动作来执行任务，当时间线运行时，这些任务将随着时间线中每个事件的发生而执行。</glossdef></glossentry><glossentry id="Default_back-buffer"><glossterm>显示缓冲区</glossterm><glossdef>显示缓冲区是最终绘制所有内容的 &quot;画布&quot;。有些事件直接以显示缓冲区为目标（如预绘制事件），而有些事件则首先绘制到应用程序表面，然后再绘制到显示缓冲区。</glossdef></glossentry><glossentry id="Default_server"><glossterm>服务器</glossterm><glossdef>在计算机领域，服务器是为其他程序或设备（称为 &quot;客户端&quot;）提供功能的计算机程序或设备。
</glossdef></glossentry><glossentry id="Default_machine_code"><glossterm>机器码</glossterm><glossdef>机器码是 CPU 直接执行的代码，无需解释器解释。它是最低级的代码，包含处理器执行的指令。
它是处理器架构的特定代码。因此，它是经过优化的。它也可以由编译器从更高级编程语言的源代码中生成。
在 GameMaker 中，YoYo 编译器可用于为各种平台生成包含优化机器代码的可执行文件。</glossdef></glossentry><glossentry id="Default_conditional"><glossterm>条件</glossterm><glossdef>条件、条件语句和条件表达式是一般编程语言的特征，它们帮助代码做出结果为真或假的选择。它们可以根据程序员的需要执行不同的操作，只要条件的最终值为真或假，就可以将多个条件组合成一个条件。条件语句的例子有 &quot;if &quot;和 &quot;while&quot;。</glossdef></glossentry><glossentry id="Default_build_tools"><glossterm>构建工具</glossterm><glossdef>构建工具是 GameMaker Studio 2 为不同目标平台生成可执行文件包所需的外部应用程序。</glossdef></glossentry><glossentry id="Default_architectures"><glossterm>架构</glossterm><glossdef>处理器芯片（CPU）的体系结构是对其基本组件和基本操作的描述。每个处理器系列都有自己的架构，如 ARM 或 x64。
</glossdef></glossentry><glossentry id="Default_spline"><glossterm>样条曲线</glossterm><glossdef>样条曲线基本上是用于连接点的平滑曲线。从数学上讲，它被定义为一个足够平滑的多项式函数，它是片断定义的，并且在多项式片断连接的地方具有很高的平滑度。</glossdef></glossentry><glossentry id="Default_framework"><glossterm>框架</glossterm><glossdef>框架是代码的基础，用户可以在此基础上进行修改和/或构建。框架可能包括不同的软件库、应用程序接口、编译器等。简单地说，框架为项目的某种编程类型和水平提供了有利的环境。例如，在 GameMaker Studio 2 中，您可以创建自己的框架项目（通过本地资产包），其中包含脚本和对象，用于一般控制、状态管理、网络或您在项目中常用的任何其他功能。</glossdef></glossentry><glossentry id="Default_deadzone"><glossterm>死区</glossterm><glossdef>死区是指在游戏识别到模拟摇杆被移动之前，你必须移动模拟摇杆的距离。死区值越低，模拟摇杆的任何轻微移动都会移动玩家或目标或其他东西。死区值越高，模拟摇杆移动的距离就越大，游戏才会检测到并移动被控制的物体。</glossdef></glossentry><glossentry id="Default_bit"><glossterm>比特</glossterm><glossdef>单个数据值，可以是 1 或 0（真或假）。比特以 8 个为一组组合成一个字节。</glossdef></glossentry><glossentry id="Default_bit_depth"><glossterm>比特深度</glossterm><glossdef>比特深度是指音频文件中每个样本的比特数。比特深度越低，音质越差，但文件大小却小得多。较低的比特深度通常用于小音效和内存可能有问题的格式（如 HTML5）。</glossdef></glossentry><glossentry id="Default_bit_rate"><glossterm>比特率</glossterm><glossdef>比特率以千位/秒（kbps 或 k）为单位，是指每秒编码的比特数或每秒传输或接收的比特数。比特率和采样率越高，音频质量越高，但所需的处理能力和带宽也越大。比特率越低，文件大小越小，使用的处理能力和带宽也越少，但音频质量会下降。要获得高质量的音乐，通常偏好设置 64-128kbps 的比特率（建议 96kbps 以上）。</glossdef></glossentry><glossentry id="Default_floating_point"><glossterm>浮点数</glossterm><glossdef>浮点数是包含小数点的数字。例如，数字 5.5、0.001 和 -2,345.6789 都是浮点数。没有小数点的数称为整数（如 2、56、1400）。</glossdef></glossentry><glossentry id="Default_render"><glossterm>渲染</glossterm><glossdef>在 GameMaker Studio 2 中，&quot;渲染&quot; 通常是指 &quot;绘制到显示缓冲区 &quot;或 &quot;绘制到表面&quot;。 渲染也可以指将某种矢量源（如字体）转化为位图图像的过程。</glossdef></glossentry><glossentry id="Default_source_code"><glossterm>源代码</glossterm><glossdef>源代码是计算机程序的基本组成部分，是程序运行所必需的。</glossdef></glossentry><glossentry id="Default_Version_Number"><glossterm>版本号</glossterm><glossdef>版本号是分配给软件程序、游戏或资产的特定版本的一组唯一数字，通常格式为 主版本.次版本.维护，例如：v2.3.56。通常情况下，随着游戏或资产的更新和全新版本的发布，版本号也会随之增加。</glossdef></glossentry><glossentry id="Default_physics"><glossterm>物理</glossterm><glossdef>在 GameMaker 中，当我们谈论一个使用 &quot;物理&quot; 的对象、实例或房间时，我们指的是它使用了基于 Box2D 物理库的内置物理模拟函数。</glossdef></glossentry><glossentry id="Default_truth_table"><glossterm>真值表</glossterm><glossdef>真值表是逻辑学中使用的数学表，特别是与布尔代数和布尔函数有关的数学表，它列出了逻辑表达式在每个函数参数上的函数值，即逻辑变量的每个取值组合。</glossdef></glossentry><glossentry id="Default_shader"><glossterm>着色器</glossterm><glossdef>着色器是一组直接在 GPU 上运行的小程序，用于创建图形和图形效果。这些程序运行速度非常快，可以释放 CPU 做其他事情。</glossdef></glossentry><glossentry id="Default_vector"><glossterm>矢量</glossterm><glossdef>矢量是一种数学结构，它有着大小（称为幅值）和方向。在 GameMaker 中，矢量通常用于显示物体移动的距离和方向。矢量还可用于定义图像，某些图像格式（如 SWF）使用矢量数学来定义它们所包含的图像。</glossdef></glossentry><glossentry id="Default_hard-code"><glossterm>硬编码</glossterm><glossdef>在计算机编程中，&quot;硬编码 &quot;一词用于描述被认为是固定的、不可能改变的代码。硬编码功能是以一种以后无法修改的方式内置于硬件或软件中。例如，如果您正在制作一款游戏，并将玩家健康状况 &quot;硬编码 &quot;为 10，那么您将在整个游戏代码中使用 10 这个值，而不是使用一个变量。</glossdef></glossentry><glossentry id="Default_port_number"><glossterm>端口号</glossterm><glossdef>端口号是识别互联网或其他网络信息到达服务器后将被转发到哪个特定进程的一种方法。</glossdef></glossentry><glossentry id="Default_algorithm"><glossterm>算法</glossterm><glossdef>算法基本上是为解决某个明确问题而设计的一组指令或规则。问题可以很简单，比如两个数字相加，也可以很复杂，比如将视频文件从一种格式转换成另一种格式，或者将音频压缩成更小的文件。</glossdef></glossentry><glossentry id="Default_sprites"><glossterm>精灵</glossterm><glossdef>精灵是一种位图图形，旨在成为更大场景的一部分。它可以是静态图像，也可以是动画图形。</glossdef></glossentry><glossentry id="Default_PURE"><glossterm>纯值函数</glossterm><glossdef>纯值函数对游戏没有影响，不会创建或改变任何东西。它只会返回一个值。在参数相同的情况下，它总是返回相同的值。</glossdef></glossentry><glossentry id="Default_texel"><glossterm>纹理元素</glossterm><glossdef>纹理元素是纹理空间的基本单位，就像像素是图片空间的基本元素一样。纹理由纹理元素数组表示，就像图片由像素数组表示一样。在对 3D 表面进行纹理处理时（这一过程称为纹理映射），渲染器会将纹理元素映射到输出图片中的相应像素。</glossdef></glossentry><glossentry id="Default_texture_atlas"><glossterm>纹理图</glossterm><glossdef>纹理页的另一个名称，它是游戏中一个或多个精灵所需的图像集合，以最佳方式组织，尽可能减少纹理内存的使用。</glossdef></glossentry><glossentry id="Default_texture_page"><glossterm>纹理页</glossterm><glossdef>纹理页（也称为纹理图）是一组图像（精灵、瓷砖集、字体字符等）的集合，这些图像以最佳方式组合在一起，以便在运行游戏时占用最少的纹理内存。</glossdef></glossentry><glossentry id="Default_linear_interpolation"><glossterm>线性插值</glossterm><glossdef>线性插值是指用一条直线连接两个相邻的已知值，从而估算出一个新值。然后，您可以通过检查直线上的任意点来获得插值。在图形学中，线性插值是指平滑像素边缘的一种基本方法。</glossdef></glossentry><glossentry id="Default_multicast"><glossterm>组播</glossterm><glossdef>组播是一种网络通信，在单次传输中，多个接收器将被寻址，而不是单个接收器。</glossdef></glossentry><glossentry id="Default_absolute"><glossterm>绝对值</glossterm><glossdef>绝对值是指忽略数值符号的绝对值，实质上是将所有数值转换为正 1 或 0。例如，-10 的绝对值就是 10。</glossdef></glossentry><glossentry id="Default_Cache"><glossterm>缓存</glossterm><glossdef>缓存是由 GameMaker 生成一次的文件集合，然后存储起来，在项目的多次运行中重复使用。需要注意的是，缓存有时会变得 &quot;陈旧&quot;，这意味着必须清除缓存，迫使 GameMaker 从头开始重建缓存，确保陈旧文件不会破坏最终游戏的可执行性。</glossdef></glossentry><glossentry id="Default_encoding"><glossterm>编码</glossterm><glossdef>编码使用公开的方案将数据转换成另一种格式，这样就很容易被逆转。这与加密不同，因为它不需要密钥来解码。编码通常用于将数据转换成另一种格式，以便不同系统更方便地使用（如将数据发送到服务器），或使人眼无法读取数据。</glossdef></glossentry><glossentry id="Default_Compiling"><glossterm>编译</glossterm><glossdef>编译是指 GameMaker 将您的代码收集在一起，以创建一个可执行软件包的方式在设备上运行游戏。</glossdef></glossentry><glossentry id="Default_swatches"><glossterm>色样</glossterm><glossdef>色样是一种颜色或材料的小方块样品，用于说明其外观效果。</glossdef></glossentry><glossentry id="Default_virtual_machine"><glossterm>虚拟机 (VM)</glossterm><glossdef>在 GameMaker 中，VM（虚拟机）是一种编译方法，它为每个平台使用一个通用运行程序，然后使用该运行程序为游戏解释代码。</glossdef></glossentry><glossentry id="Default_expression"><glossterm>表达式</glossterm><glossdef>表达式是一个或多个常量、变量、运算符和/或函数的组合，这些常量、变量、运算符和/或函数根据特定的优先级和关联规则进行解释，从而返回另一个值。一个简单的表达式是 (5+5)，返回值是 10。</glossdef></glossentry><glossentry id="Default_statement"><glossterm>语句</glossterm><glossdef>在编程中，语句是用编程语言合法编写的一行代码，表达要执行的操作。语句可能有自己的内部组件，包括表达式、运算符和函数。语句的一个例子是 A = B + 5。GameMaker Studio 2 程序不过是由一个或多个语句组成的序列，这些语句共同执行一项任务（如移动玩家）。</glossdef></glossentry><glossentry id="Default_syntax"><glossterm>语法</glossterm><glossdef>与人类语言类似，编程语言也有一套自己的规则，规定如何表达语句，这套规则被称为语法。虽然许多编程语言共享许多特性、函数和功能，但它们在语法上一般都存在差异。如果不正确使用语法，就无法编写出可执行的程序，而错误的语法会导致编译时出错。</glossdef></glossentry><glossentry id="Default_bezier_interpolation"><glossterm>贝塞尔插值</glossterm><glossdef>贝塞尔插值法是用数学生成的样条曲线连接两个相邻的已知值，从而估算出一个新值。然后，您可以通过检查沿线上的任意点来获取插值。</glossdef></glossentry><glossentry id="Default_Asset_Track"><glossterm>资产轨道</glossterm><glossdef>序列轨道面板中的一个轨道，用于保存单个资产，包括一个精灵、一个声音、一个实例或一个序列。</glossdef></glossentry><glossentry id="Default_asset_key"><glossterm>资产键</glossterm><glossdef>在时间轴上放置资产的位置。资产键可持续多个帧。</glossdef></glossentry><glossentry id="Default_assignment"><glossterm>赋值</glossterm><glossdef>赋值是我们为变量设置（分配）值时使用的简单术语。</glossdef></glossentry><glossentry id="Default_Track_Panel"><glossterm>轨道面板</glossterm><glossdef>序列编辑器中显示序列中所有不同轨道（资产轨道、参数轨道、轨道组和剪辑蒙版组）的区域。</glossdef></glossentry><glossentry id="Default_bounding_box"><glossterm>边界框</glossterm><glossdef>对于精灵，边界框是最初检测到碰撞的区域边缘的名称，其大小不必与所应用的精灵相同。对于序列，边框是画布中一个或多个资产所占总空间的外缘。</glossdef></glossentry><glossentry id="Default_operator"><glossterm>运算符</glossterm><glossdef>运算符是用来表示可以操作不同操作数的术语。在表达式 A + B - C 中，+ 和 - 就是运算符。不同运算符的例子有 +（加法）、-（减法）、=（等于）、!=（不等于）和 &gt;=（大于或等于），但还有更多。</glossdef></glossentry><glossentry id="Default_Remote_Workers"><glossterm>远程工作程序</glossterm><glossdef>远程工作程序是一种特殊程序，GameMaker Studio 2 会在某些平台上使用它来创建游戏可执行文件，而无需在该平台上实际运行 GameMaker Studio 2 集成开发环境。</glossdef></glossentry><glossentry id="Default_iteration"><glossterm>迭代</glossterm><glossdef>迭代是对项目代码中一组操作的单次传递。计算机编程中的一种迭代方式是循环。循环会重复执行某段代码，直到满足条件，可以继续执行。计算机每运行一次循环，就称为一次迭代。简单地说，迭代就是反复重复某一代码段以执行特定操作的过程。</glossdef></glossentry><glossentry id="Default_sample_rate"><glossterm>采样率</glossterm><glossdef>采样率是指每秒传输的音频样本数，单位为赫兹或千赫（1 千赫等于 1000 赫兹）。采样率越高，声音就越接近原始模拟波形，但文件大小也就越大。一般来说，音效的采样率比音乐低即可。</glossdef></glossentry><glossentry id="Default_downsampling"><glossterm>降采样</glossterm><glossdef>降采样是减少音频采样的过程，更广泛地说，是减少信号采样的过程。对于音频而言，这意味着样本被丢弃，剩下的样本减少，从而导致信息丢失。音频的采样频率和音频质量都会降低。这种变化会使音频失真。</glossdef></glossentry><glossentry id="Default_vertex"><glossterm>顶点</glossterm><glossdef>顶点是多边形中一个点的名称，它包含定义其位置、颜色和纹理的各种特征。在计算机图形学中，顶点通常指三角形的一个角，用来创建一个基元，这些基元的组合就是屏幕上的图形。</glossdef></glossentry></glossgroup>